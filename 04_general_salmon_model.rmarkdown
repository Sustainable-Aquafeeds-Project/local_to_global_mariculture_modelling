---
title: "General salmonid model"
format: html
editor: visual
---


Setup


```{r}
library(tidyverse)
library(terra)
library(qs)
library(here)
library(sf)
library(furrr)
library(future)

#functions
source(here("src/model_functions.R"))

#species paths
this_species <- "general_salmonid"
this_path <- sprintf(here("data/%s"), this_species)


```


Prep temperature forcings for each farm site


```{r}

production_cycle <- read_csv("data/_general_data/production_cycles/production_cycle.csv") |> filter(species == this_species) |> rename(production_cycle_length = days)|> pull(production_cycle_length)


farms <-  qread("data/_general_data/farm_locations/locations_w_species_fao_area_stocking.qs") |> 
  filter(model_name == this_species) |> 
  select(-row_num) |> 
  mutate(farm_id = row_number())


days <- seq(1:production_cycle)


temp_data <- map_dfc(.x = days, .f = \(day_number){
  
  rast_day_number <- if_else(day_number <= 365, true = day_number, false = day_number-365)
  
  message("Getting temperature data for all sites for ", this_species,  " - day ", day_number)
  
  sst_test <- rast(sprintf("data/_general_data/SST/SST_gf_rasters/sst_nasa_mur_L4_0.25_mean2010-2019_day_%s.tif", rast_day_number))

  extract(sst_test, farms) |> 
    mutate(day = paste0("day_", day_number)) |> 
    pivot_wider(names_from = "day", values_from = "focal_mean") |> 
    select(-ID)
  
  
}) |> 
  mutate(farm_id = row_number())


farms_w_temp_df <- 
  farms |> 
  left_join(temp_data, by = c("farm_id" = "farm_id")) |> 
  pivot_longer(names_to = "day", values_to = "temp_c", cols = starts_with("day_"))


#check which farms have missing temp data
(missing_temp_farms <- farms_w_temp_df |> 
   filter(temp_c |> is.na()) |> pull(farm_id) |> unique())

#how far apart in the sequence are the farms? If the previous is complete we should be able to use the one before in the same country
diff(missing_temp_farms)


# Make the farm list
farm_list <- 
  farms_w_temp_df |>
  group_by(farm_id) |> 
  group_split()


#Loop through and assigned temp of farms missing temp data, to the farm adjacent (the nearest complete index before)

for(i in 1:length(farm_list)){
  
  message("Checking temp data for ", unique(farm_list[[i]]$farm_id), " -", this_species) 
  
  if(unique(is.na(farm_list[[i]]$temp_c))){ #if temp data is NA see below
    
    cat("Is the previous farm index the same country?")
    if(unique(farm_list[[i-1]]$country) == unique(farm_list[[i]]$country)){
      
      if(!unique(is.na(farm_list[[i-1]]$temp_c))){ # if the farm index before is NOT NA, use that.
        
        farm_list[[i]]$temp_c <- farm_list[[i-1]]$temp_c
        
      } else {
        
        farm_list[[i]]$temp_c <- farm_list[[i-2]]$temp_c.  #else use the farm index 2 before (the missing_farm_
        
      }
    } else {stop("Previous country index not the same")} #if the previous country is not the same country stop the looop
  }
}

#check again - looks good - no values.
bind_rows(farm_list) |>  filter(temp_c |> is.na()) |> pull(farm_id) |> unique()


#save the new locations data 

farms_w_temp_df <- bind_rows(farm_list)


qsave(x = farms_w_temp_df, file = sprintf("data/_general_data/farm_locations/%s_locations_w_temps.qs", this_species))


#save temperature forcings per farm

future::plan(strategy = "multisession", workers = parallel::detectCores()-2) #select multiple cores

furrr::future_map(.x = farm_list, .f = \(this_farm){
  
  this_farm_id <- unique(this_farm$farm_id)
  
  temp_data_only <- 
    this_farm |> 
    select(day, temp_c) |> 
    st_drop_geometry()
  
  
  saveName <- sprintf("data/%s/forcings/Water_temperature_farmID_%s.csv", this_species, this_farm_id)
  
  if(!file.exists(saveName)){
    
     write.table(x = temp_data_only, file = saveName, col.names = FALSE, row.names = FALSE, sep = ",")
  }
    
})


#get th emean temps for each farm - this is needed to check which annual temps the fish can deal with
mean_farm_temp <- 
  farm_list |> map_df(.f = \(x){
  data.frame(farm_id = unique(x$farm_id), 
             mean_temp = mean(x$temp_c),
             country = unique(x$country),
             volume = unique(x$tonnes_per_farm))
})


farms_to_omit <- mean_farm_temp |> filter(mean_temp<8.5) |> pull(farm_id)



```


Run model for each location under reference feed.


```{r}

Feed_type <- "reference"


farm_list <- 
  qread(file = sprintf("data/_general_data/farm_locations/%s_locations_w_temps.qs", this_species)) |> 
  filter(model_name == this_species) |> 
  group_by(farm_id) |> 
  group_split()
    

#test 
#this_farm <- farm_list[[41]]

future::plan(strategy = "multisession", workers = parallel::detectCores()-2) #select core cluster

furrr::future_map(.x = farm_list, .f = \(this_farm){
  
  this_stocking_N = unique(round(this_farm$stocking_n))
  
  this_farm_id <- unique(paste0("farmID_", this_farm$farm_id))
  
  out_loader <- data_loader(Path =  this_path, Farm_id = this_farm_id)
  
  model_run(Path = this_path, Forcings = out_loader, Feed_type = Feed_type, Stocking = this_stocking_N, Farm_id = this_farm_id)
  
},
.options = furrr_options(seed = 123))



```

