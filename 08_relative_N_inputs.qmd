---
title: "08_relative_N_inputs"
author: Tormey Reimer
date: today
editor: source
---

# Introduction

The purpose of this markdown is to:

1. Import and clean up background nitrogen data
2. Overlay background nitrogen and Atlantic salmon farm locations
3. Compare annual inputs from the different sources

```{r setup}
#| code-summary: R setup

library(tidyr)
library(dplyr)
library(magrittr)
library(stringr)
library(here)
library(terra)
library(sf)
library(qs)
library(ggplot2)
library(tidyterra)
library(cowplot)
library(rnaturalearth)
library(purrr)

source("00_dirs.R")

overwrite <- F
```

# Base rasters for resolution

```{r base-raster}
#| code-summary: Create some blank rasters with parameters to be used going forward

inset_boxes <- list(
  CAN1 = c(-132, -122, 47.75, 54.25),
  CAN2 = c(-70, -54, 43, 48.5),
  EUR = c(-26, 30, 51, 72),
  CHI = c(-77.5, -62.5, -56, -25),
  AUS = c(144, 149.5, -44, -39.75)
)

base_wgs84 <- rast(res = c(0.008333333, 0.008333333), extent = ext(c(-180, 180, -90, 90)), crs = "EPSG:4326")
base_molle <- rast(res = c(1000, 1000), extent = ext(c(-18040096, 18040096, -9020048, 9020048)), crs = "ESRI:54009")

wgs84_insets <- inset_boxes %>% 
  lapply(function(bx) {crop(base_wgs84, ext(bx))}) 

molle_insets <- wgs84_insets %>% 
  lapply(function(rs) {project(rs, crs(base_molle))}) %>% 
  lapply(function(rs) {ext(rs)}) %>% 
  lapply(function(ex) {crop(base_molle, ex)})
```

# Raw background nitrogen

Data for nutrient runoff from agriculture fertilisers and pesticides was downloaded from @halpern_recent_2019-1 [dataset here: @halpern_recent_2019]. 

```{r raw-back-N-halpern}
#| code-summary: Import data from @halpern_recent_2019 and crop/reproject for the 5 insets being used
#| eval: false

halpern_N_rast <- file.path(input_Ndata_path, "halpern_2019", "nutrient_pollution_2013_raw.tif") %>% rast() 

halpern_insets <- molle_insets %>% 
  lapply(function(ins) {project(halpern_N_rast, ins, method = "cubic")})



# Change to the Molleweide projection
tuholske_N_rast <- file.path(input_Ndata_path, "tuholske_2021", "global_effluent_2015_tot_N.tif") %>% rast() 
tuholske_insets <- molle_insets %>% 
  lapply(function(ins) {project(tuholske_N_rast, ins, method = "cubic")})

# The halpern data has NA values for land but the tuholske data does not
tuholske_insets <- map2(tuholske_insets, halpern_insets, function(rast, mask) {
  mask(rast, mask)
})

background_N_insets <- map2(halpern_insets, tuholske_insets, function(dat1, dat2) {dat1 + dat2})

map2(names(halpern_insets), background_N_insets, function(nm, rast) {
  writeRaster(rast, file.path(input_Ndata_path, str_c("background_N_inset_", nm, ".tif")))
})
```

Data for inputs of human sewage in coastal ecosystems was sourced from @tuholske_global_2021 [dataset here: @tuholske_mapping_2021]. 
The data is in annual g N.

```{r raw-back-N-tuholske}
#| code-summary: Import data from @tuholske_global_2021 and crop/reproject for the 5 insets being used
#| eval: false

# Change to the Molleweide projection
tuholske_N_rast <- file.path(input_Ndata_path, "tuholske_2021", "global_effluent_2015_tot_N.tif") %>% rast() 
tuholske_insets <- molle_insets %>% 
  lapply(function(ins) {project(tuholske_N_rast, ins, method = "cubic")})

# The halpern data has NA values for land but the tuholske data does not
tuholske_insets <- map2(tuholske_insets, halpern_insets, function(rast, mask) {
  mask(rast, mask)
})
```

```{r save-back-N}
#| code-summary: Combine and save background N data

background_N_insets <- map2(
  halpern_insets, 
  tuholske_insets, 
  function(halpern, tuholske) {
    halpern + tuholske
  })

map2(names(halpern_insets), background_N_insets, function(nm, rast) {
  writeRaster(rast, file.path(input_Ndata_path, str_c("background_N_inset_", nm, ".tif")))
})
```



```{r load-background-data}
#| code-summary: Load previously saved inset rasters

background_N_insets <- lapply(names(inset_boxes), function(nm) {
  file.path(input_Ndata_path, str_c("background_N_inset_", nm, ".tif")) %>% rast()
})
```

# Load modelled N data

```{r farm locations}
#| code-summary: Bring in modelled salmon inputs data

farm_locs <- file.path(output_farm_data_path, "farm_geometry.qs") %>% qs::qread()
farm_sfs <- st_sf(farm_id = farm_locs$farm_id, geometry = farm_locs$geometry) %>% 
  st_transform(crs = crs(base_molle))
farm_id_insets <- background_N_insets %>% 
  lapply(function(ins) {rasterize(farm_sfs, ins, field = "farm_id")})
```



# Combine with background N

```{r}
# 2. Extract 3x3 neighborhood data for each farm point
# Get cell numbers for each farm point
farm_cells <- cellFromXY(back_N_rast, st_coordinates(farm_sfs))

# Function to get 5x5 neighborhood cell numbers
get_neighborhood_cells <- function(raster, center_cells) {
  # Get raster dimensions
  nrows <- nrow(raster)
  ncols <- ncol(raster)
  
  # Convert cell numbers to row/col indices
  rows <- rowFromCell(raster, center_cells)
  cols <- colFromCell(raster, center_cells)
  
  # Create all 25 neighbor offsets (including center) for 5x5 grid
  offsets <- expand.grid(row_offset = -2:2, col_offset = -2:2)
  
  # Initialize list to store results
  all_neighbors <- vector("list", length(center_cells))
  
  for(i in seq_along(center_cells)) {
    # Calculate neighbor row/col positions
    neighbor_rows <- rows[i] + offsets$row_offset
    neighbor_cols <- cols[i] + offsets$col_offset
    
    # Check bounds and filter valid cells
    valid_cells <- neighbor_rows >= 1 & neighbor_rows <= nrows & 
                   neighbor_cols >= 1 & neighbor_cols <= ncols
    
    # Convert back to cell numbers
    neighbor_cells <- cellFromRowCol(raster, 
                                   neighbor_rows[valid_cells], 
                                   neighbor_cols[valid_cells])
    
    # Create position labels for 5x5 grid
    row_names <- c("T2", "T1", "Crow", "B1", "B2")
    col_names <- c("L2", "L1", "Ccol", "R1", "R2")
    
    position_grid <- outer(row_names, col_names, paste, sep = "_")
    position_labels <- as.vector(position_grid)
    valid_positions <- position_labels[valid_cells]
    
    all_neighbors[[i]] <- data.frame(
      farm_id = farm_sfs$farm_id[i],
      cell_id = neighbor_cells,  # for overlap detection
      position = valid_positions,
      stringsAsFactors = FALSE
    )
  }
  return(do.call(rbind, all_neighbors))
}

# Get all neighborhood cells
neighborhood_data <- get_neighborhood_cells(back_N_rast, farm_cells) %>% 
  mutate(
    category = case_when(position == "Crow_Ccol" ~ "farm_direct",
                         position %in% c("T1_L1", "T1_Ccol", "T1_R1", "B1_L1", "B1_Ccol", "B1_R1", "Crow_L1", "Crow_R1") ~ "adjacent_1",
                         T ~ "adjacent_2"),
    category = factor(category, levels = c("farm_direct", "adjacent_1", "adjacent_2")),
    position = factor(position, levels = c(
      "T2_L2",   "T2_L1",   "T2_Ccol",   "T2_R1",   "T2_R2", 
      "T1_L2",   "T1_L1",   "T1_Ccol",   "T1_R1",   "T1_R2", 
      "Crow_L2", "Crow_L1", "Crow_Ccol", "Crow_R1", "Crow_R2", 
      "B1_L2",   "B1_L1",   "B1_Ccol",   "B1_R1",   "B1_R2", 
      "B2_L2",   "B2_L1",   "B2_Ccol",   "B2_R1",   "B2_R2"
    )))

# Extract nutrient values and combine with cell_ids
nutrient_values <- terra::extract(back_N_rast$nutrient_pollution_2013_raw, neighborhood_data$cell_id)
neighborhood_data <- cbind(neighborhood_data, nutrient_values) %>% 
  rename(np = nutrient_pollution_2013_raw)

# Fill gaps from original data with 8 neighbours
neighborhood_data_gaps <- neighborhood_data %>% filter(is.na(np))
for (i in 1:nrow(neighborhood_data_gaps)) {
  adj_cells <- adjacent(back_N_rast$nutrient_pollution_2013_raw, cells = neighborhood_data_gaps$cell_id[i], directions = 8)
  neighborhood_data_gaps$np[i] <- back_N_rast$nutrient_pollution_2013_raw[adj_cells[1,]] %>% 
    pull(nutrient_pollution_2013_raw) %>% 
    mean(na.rm = T)
}
neighborhood_data <- neighborhood_data %>% 
  filter(!is.na(np)) %>% 
  rbind(neighborhood_data_gaps)
neighborhood_data %>% filter(is.na(np)) %>% nrow() # 3221 still blank
neighborhood_data %>% filter(is.na(np) & position == "Crow_Ccol") %>% nrow() # 87 of those are direct farm cells

# Fill gaps from original data with 16 neighbours
neighborhood_data_gaps <- neighborhood_data %>% filter(is.na(np))
for (i in 1:nrow(neighborhood_data_gaps)) {
  adj_cells <- adjacent(back_N_rast$nutrient_pollution_2013_raw, cells = neighborhood_data_gaps$cell_id[i], directions = 16)
  neighborhood_data_gaps$np[i] <- back_N_rast$nutrient_pollution_2013_raw[adj_cells[1,]] %>% 
    pull(nutrient_pollution_2013_raw) %>% 
    mean(na.rm = T)
}
neighborhood_data <- neighborhood_data %>% 
  filter(!is.na(np)) %>% 
  rbind(neighborhood_data_gaps)
neighborhood_data %>% filter(is.na(np)) %>% nrow() # 4489 still blank
neighborhood_data %>% filter(is.na(np) & position == "Crow_Ccol") %>% nrow() # 149 of those are direct farm cells
```

```{r summary}
# Summary statistics
summary_stats <- neighborhood_data %>%
  group_by(farm_id, category) %>%
  reframe(
    mean = mean(np, na.rm = T),
    min = min(np, na.rm = T),
    max = max(np, na.rm = T),
    cells = n()
  )

# Maybe use adjacent farms to fill gaps?

ggplot(neighborhood_data, aes(x = category, y = log(np), fill = position)) +
  geom_boxplot()
```

# Plot mean nutrient pollution

```{r}
farm_N <- summary_stats %>% 
  filter(category == "farm_direct")

farm_N_sfs <- st_sf(farm_N = farm_N$mean, geometry = farm_locs$geometry) %>% 
  st_transform(crs = crs(back_N_rast))

plot(farm_N_sfs)
```

