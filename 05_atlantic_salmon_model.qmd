---
title: "Atlantic salmon model"
format: html
editor: visual
---

Setup

```{r}
library(tidyverse)
library(terra)
library(qs)
library(here)
library(sf)

#functions
source(here("src/model_functions.R"))

#species paths
this_species <- "atlantic_salmon"
this_path <- sprintf(here("data/%s"), this_species)

```


Prep temperature forcings for each farm site

```{r}

production_cycle <- read_csv("data/_general_data/production_cycles/production_cycle.csv") |> filter(species == this_species) |> rename(production_cycle_length = days)|> pull(production_cycle_length)


farms <-  qread("data/_general_data/farm_locations/locations_w_species_fao_area_stocking.qs") |> 
  filter(model_name == this_species) |> 
  select(-row_num) |> 
  mutate(farm_id = row_number())


days <- seq(1:production_cycle)


temp_data <- map_dfc(.x = days, .f = \(day_number){
  
  rast_day_number <- if_else(day_number <= 365, true = day_number, false = day_number-365)
  
  message("Getting temperature data for all sites for ", this_species,  " - day ", day_number)
  
  sst_test <- rast(sprintf("data/_general_data/SST/SST_gf_rasters/sst_nasa_mur_L4_0.25_mean2010-2019_day_%s.tif", rast_day_number))

  extract(sst_test, farms) |> 
    mutate(day = paste0("day_", day_number)) |> 
    pivot_wider(names_from = "day", values_from = "focal_mean") |> 
    select(-ID)
  
  
}) |> 
  mutate(farm_id = row_number())


farms_w_temp_df <- 
  farms |> 
  left_join(temp_data, by = c("farm_id" = "farm_id")) |> 
  pivot_longer(names_to = "day", values_to = "temp_c", cols = starts_with("day_"))


head(farms_w_temp_df)

qsave(x = farms_w_temp_df, file = sprintf("data/_general_data/farm_locations/%s_locations_w_temps.qs", this_species))


farm_list <- 
  farms_w_temp_df |>
  group_by(farm_id) |> 
  group_split()


#save temperature forcings per farm

future::plan(strategy = "multisession", workers = parallel::detectCores()-2) #select multiple cores

furrr::future_map(.x = farm_list, .f = \(this_farm){
  
  this_farm_id <- unique(this_farm$farm_id)
  
  temp_data_only <- 
    this_farm |> 
    select(day, temp_c) |> 
    st_drop_geometry()
  
  
  saveName <- sprintf("data/%s/forcings/Water_temperature_farmID_%s.csv", this_species, this_farm_id)
  
  if(!file.exists(saveName)){
    
     write.table(x = temp_data_only, file = saveName, col.names = FALSE, row.names = FALSE, sep = ",")
  }
    
})





```


Run model for each location under reference feed.

```{r}

# pull in data for interpolation



forcings <- data_loader(this_path, this_species, this_farm)


inputs <- preprocess(this_path = this_path, these_forcings = forcings)


model_output <- model(this_path = this_path, forcings = forcings, this_species = this_species)


```

