{
  "hash": "a20792423eb398da132db53ed3933c21",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Individual Mariculture Modeling Analysis\"\nformat: html\neditor: source\n---\n\n\n\n# Introduction\n\nThis document runs individual mariculture modeling analyses for Atlantic salmon farms. It processes farm location data, species parameters, and conducts sensitivity analyses to understand the impact of various parameters on fish and farm growth measures.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(arrow)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(terra)\nlibrary(magrittr)\nlibrary(furrr)\nlibrary(future)\nlibrary(tictoc)\nlibrary(ggplot2)\nlibrary(fs)\nlibrary(conflicted)\nlibrary(stringr)\nlibrary(readxl)\nlibrary(units)\nlibrary(qs)\nlibrary(here)\nlibrary(targets)\nconflicted::conflicts_prefer(dplyr::filter(), dplyr::select(), .quiet = T)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set up parallel processing\n# plan(multisession, workers = parallelly::availableCores()-1)\n\n# Filenames\nspecies_params_excel <- c(file = file.path(input_species_param_path, \"Species.xlsx\"), sheet = \"Atlantic salmon\")\npop_params_excel <- c(file = file.path(input_species_param_path, \"Population.xlsx\"))\nfarm_locations_parquet <- file.path(input_farm_coords_path, \"farm_coords.parquet\")\nfarm_coords_file <- file.path(output_farm_data_path, \"farm_coords.qs\")\nfarm_geometry_file <- file.path(output_farm_data_path, \"farm_geometry.qs\")\nfarm_ts_data_file <- file.path(output_farm_data_path, \"farm_ts_data.qs\")\nspecies_params_file <- file.path(output_species_data_path, \"species_params.qs\")\nsens_params_file <- file.path(output_species_data_path, \"sens_params.qs\")\npop_params_file <- file.path(output_species_data_path, \"pop_params.qs\")\nfeed_params_file <- file.path(output_species_data_path, \"feed_params.qs\")\nfarm_harvest_file <- file.path(output_farm_data_path, \"farm_harvest_size.qs\")\n```\n:::\n\n\n\n# Data for targets pipelines\n\nMuch of the actual analysis is run through targets pipelines. Therefore, we need to make sure that the files going into those pipelines are correct and up to date. \n\nLoad and process farm coordinate data with appropriate timing parameters for Northern and Southern hemisphere farms.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntimes_N <- c(\"t_start\" = 121, \"t_end\" = 121+547, \"dt\" = 1)\ntimes_S <- c(\"t_start\" = 274, \"t_end\" = 274+547, \"dt\" = 1)\n\nfarm_coords <- farm_locations_parquet %>% \n  read_parquet() %>% \n  mutate(t_start = case_when(lat > 0 ~ times_N['t_start'], TRUE ~ times_S['t_start']), \n          t_end = case_when(lat > 0 ~ times_N['t_end'], TRUE ~ times_S['t_end']),\n          t_start = unname(t_start),\n          t_end = unname(t_end))\n\nqsave(farm_coords, farm_coords_file)\n\n# Also save geometry for later\nfile.path(input_farm_coords_path, \"atlantic_salmon_locations_w_temps.qs\") %>% \n  qread() %>% \n  dplyr::filter(day == \"day_1\") %>% \n  dplyr::select(farm_id, geometry, country) %>% \n  qsave(farm_geometry_file)\n```\n:::\n\n\n\n## Farm Time Series Data\n\nProcess Sea Surface Temperature (SST) data for each farm location.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfarms_to_omit <- qread(sprintf(file.path(input_farm_coords_path, \"%s_farms_to_omit.qs\"), this_species))\nfarm_SST_data <- read_parquet(file.path(input_farm_sst_path, \"farm_SST_extracted.parquet\"))\nfarm_IDs <- farm_SST_data %>%\n  filter(!farm_id %in% farms_to_omit) %>%\n  distinct(farm_id) %>%\n  pull(farm_id)\n\nfarm_ts_data <- farm_SST_data %>%\n  rename(farm_ID = farm_id) %>% \n  select(c(farm_ID, day, temp_c)) %>%\n  mutate(day = str_split_i(day, \"day_\", 2) %>% as.integer())\n\nqsave(farm_ts_data, farm_ts_data_file)\n```\n:::\n\n\n\n# Species and population parameters\n\nLoad species-specific parameters from Excel file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_params <- readxl::read_excel(\n  path = species_params_excel[\"file\"], \n  sheet = species_params_excel[\"sheet\"]\n)\nvals <- species_params$Value\nnames(vals) <- species_params$Quantity\nspecies_params <- vals[!is.na(vals)]\nqsave(species_params, species_params_file)\n```\n:::\n\n\n\nLoad population-specific parameters.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_params <- readxl::read_excel(path = pop_params_excel[\"file\"])\nvals <- pop_params$Value\nnames(vals) <- pop_params$Quantity\npop_params <- vals[!is.na(vals)]\nqsave(pop_params, pop_params_file)\n```\n:::\n\n\n\n# Farm Harvest Size Calculations\n\nCalculations of expected harvest sizes for each farm (using default feed and no Monte-Carlo variation) are done in the targets pipeline.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.setenv(TAR_PROJECT = \"project_farmruns\")\n\ntargets::tar_make(harvest_size)\ntargets::tar_load(harvest_size)\nqsave(harvest_size, farm_harvest_file)\n\nmean(harvest_size$weight)\nmin(harvest_size$weight)\nmax(harvest_size$weight)\n\nggplot(harvest_size, aes(x = weight)) +\n  geom_histogram(fill = \"salmon\", alpha = 0.75, colour = \"black\")\n```\n:::\n\n\n\n# Sensitivity analysis\n\nRun the sensitivity runs using the targets pipeline. \nNote that this can take a long time (hours), as the species parameters (19) are run for each farm (2721) and factor (3) and the population parameters (6) are run for a smaller number of farms (271) and factor with a simulated population of 500 fish.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.setenv(TAR_PROJECT = \"project_sensitivities\")\n\ntargets::tar_validate()\ntargets::tar_visnetwork(targets_only = T)\ntargets::tar_outdated()\ntargets::tar_make(\n  seconds_meta_append = 120\n  )\n```\n:::\n\n\n\n## Process sensitivity results\n\nCombine and visualise sensitivity analysis results.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets::tar_load(sens_results_spec)\ntargets::tar_load(sens_results_pop)\n\nsens_results <- rbind(\n  sens_results_pop,\n  sens_results_spec\n)\n\nsens_measures <- levels(sens_results$measure)\nsens_results_files <- file.path(output_sens_data_path, paste0(\"sens_results_\", sens_measures, \".qs\"))\nsens_results_figfiles <- file.path(output_sens_data_path, paste0(\"sens_plot_\", sens_measures, \".qs\"))\nsens_results_figfiles2 <- file.path(output_sens_data_path, paste0(\"sens_plot_\", sens_measures, \".png\"))\n\nfor (sm in seq_along(sens_measures)) {\n  sens_results %>% \n    filter(measure == sens_measures[sm]) %>% \n    qsave(sens_results_files[sm])\n  \n  p <- sens_results %>% \n    filter(measure == sens_measures[sm]) %>% \n    ggplot(aes(x = adj_param, y = mean_sens, ymin = mean_sens-sd_sens, ymax = mean_sens+sd_sens)) +\n    geom_col(fill = \"salmon\", alpha = 0.65, colour = \"black\") +\n    geom_errorbar(width = 0.5) +\n    coord_flip() +\n    theme_classic()\n  qsave(p, sens_results_figfiles[sm])\n  ggsave(sens_results_figfiles2[sm])\n}\n```\n:::\n\n\n\n# Run farms\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.setenv(TAR_PROJECT = \"project_farmruns\")\n\ntargets::tar_validate()\ntargets::tar_visnetwork(targets_only = T)\ntargets::tar_outdated()\ntargets::tar_make(seconds_meta_append = 90)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntargets::tar_load(cohort_results)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}