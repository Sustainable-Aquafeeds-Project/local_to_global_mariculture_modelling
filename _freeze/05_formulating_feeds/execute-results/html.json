{
  "hash": "a1e1d4e6b3fafb6b9701acc37c108cb9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Formulating experimental feeds\"\nauthor: Tormey Reimer\ndate: today\neditor: source\n---\n\n\n\n# Introduction\n\nThe purpose of this markdown is to:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"R setup\"}\nlibrary(arrow)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(terra)\nlibrary(magrittr)\nlibrary(furrr)\nlibrary(future)\nlibrary(tictoc)\nlibrary(ggplot2)\nlibrary(fs)\nlibrary(conflicted)\nlibrary(stringr)\nlibrary(readxl)\nlibrary(units)\nlibrary(qs)\nlibrary(here)\nconflicts_prefer(dplyr::filter(), dplyr::select(), .quiet = T)\n\nhere(\"00_model_functions.R\") %>% source()\nhere(\"00_dirs.R\") %>% source()\n\ningred_inputs_file <- file.path(input_feed_profile_path, \"all_ingredients.csv\")\nfeed_input_file <- file.path(input_feed_profile_path, \"all_feeds.csv\")\noverwrite <- F\n```\n:::\n\n\n\n# Import ingredients\n\nThere is no check or correction here to ensure that protein+lipid+ash+carb = 1 in the incoming data. This was checked manually prior to import. \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Ingredient details\"}\ningreds <- ingred_inputs_file %>% \n  read.csv() %>% \n  mutate(ingredient = as.factor(ingredient))\ningred_nms <- levels(ingreds$ingredient)\n```\n:::\n\n\n\n# Import feeds\n\nThere is no check or correction here to ensure that ingredient proportions = 1 in the incoming data. This was checked manually prior to import. \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Feed compositions\"}\nfeed_inputs <- feed_input_file %>% \n  read.csv() %>% \n  pivot_longer(names_to = \"feed\", values_to = \"proportion\", cols = !contains(c(\"ingredient\", \"proportion\"))) %>% \n  mutate(feed = as.factor(feed),\n         ingredient = as.factor(ingredient)) %>% \n  merge(ingreds, by = \"ingredient\", all = T)\n\nfeed_types <- levels(feed_inputs$feed)\n```\n:::\n\n\n\nThe following chunk allows as many ingredients and feeds to be added to the incoming data as needed, it will still be formatted into a form that the `targets` pipelines can use. \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Format feeds as lists to feed into targets\"}\nfeed_params <- purrr::map(feed_types, function(ft) {\n  df <- feed_inputs %>% \n    filter(feed == ft & proportion != 0) \n  list(\n    Proteins = df %>% \n      select(ingredient, proportion, contains(\"protein\"), -contains(\"feed\")) %>%\n      rename(macro = protein, digest = protein_digestibility),\n    Carbohydrates = df %>% \n      select(ingredient, proportion, contains(\"carb\"), -contains(\"feed\")) %>%\n      rename(macro = carb, digest = carb_digestibility),\n    Lipids = df %>% \n      select(ingredient, proportion, contains(\"lipid\"), -contains(\"feed\")) %>%\n      rename(macro = lipid, digest = lipid_digestibility)\n  )\n}) %>% \n  setNames(feed_types)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nqsave(feed_params, file.path(output_species_data_path, \"feed_params.qs\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}