{
  "hash": "2807592a7b2a51efcddc445e3ab7b827",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Extracting salmon farm temperature data\"\nauthor: Tormey Reimer\ndate: today\neditor: source\n---\n\n\n\n# Introduction\n\nThe purpose of this markdown is to extract daily temperature timeseries from SST data to drive fish growth in the correct places. The steps in this markdown are:\n\n1. Pull farm locations data (previously determined from FAO stocking locations)\n2. Record whether the farm is in the southern or north hemisphere (determines cohort stocking date)\n3. Pull SST data from .tif file and construct \"typical\" temperature year for each farm location\n4. Gapfill missing temperature data using closest farm in the same FAO stocking area\n5. Save temperature data both with and without geometry information\n6. Determine which farms have a mean temperature <=6 C (will be omitted)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"R setup\"}\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(terra)\nlibrary(qs)\nlibrary(here)\nlibrary(sf)\nlibrary(purrr)\nlibrary(furrr)\nlibrary(targets)\nlibrary(future)\nlibrary(arrow)\nlibrary(readxl)\nlibrary(units)\nlibrary(tictoc)\nlibrary(conflicted)\nconflicts_prefer(dplyr::select(), dplyr::filter(), .quiet = T)\n\nsource(\"00_dirs.R\")\n\noverwrite <- F\n```\n:::\n\n\n\n# Farm locations\n\nGet global farm locations and determine whether they're in the southern or northern hemisphere.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Get all farm locations\"}\nfarms <- file.path(input_farm_coords_path, \"locations_w_species_fao_area_stocking.qs\") %>% \n  qread() %>% \n  filter(model_name == this_species) %>% \n  select(-row_num) %>% \n  mutate(farm_id = row_number())\n\nhemi <- cbind(farms$farm_id, sf::st_coordinates(farms$geometry)) %>% \n  as.data.frame() %>% rename(farm_ID = V1, lon = X, lat = Y) %>% \n  write_parquet(file.path(input_farm_coords_path, \"farm_coords.parquet\"))\n```\n:::\n\n\n\nGet daily temperatures for a period of 1100 days (to cover 3 cohorts of 548 days each). Whether a farm is in the southern or northern hemisphere determines the cohorts' start date.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Create typical year of SST for all farms\"}\nday_number <- seq(1:1100)\ntemp_data <- purrr::map_dfc(.x = day_number, .f = function(day_number){\n  rast_day_number <- if_else(day_number <= 365, true = day_number, false = day_number-365)\n  rast_day_number <- if_else(rast_day_number <= 365, true = rast_day_number, false = rast_day_number-365)\n  rast_day_number <- if_else(rast_day_number <= 365, true = rast_day_number, false = rast_day_number-365)\n  message(\"Getting temperature data for all sites for \", this_species,  \" - day \", day_number)\n  \n  sst_test <- file.path(input_farm_sst_path, \"SST_gf_rasters\", \n                        sprintf(\"sst_nasa_mur_L4_0.25_mean2010-2019_day_%s.tif\", rast_day_number)) %>% \n    terra::rast()\n  \n  terra::extract(sst_test, farms) %>%\n    mutate(day = paste0(\"day_\", day_number)) %>%\n    pivot_wider(names_from = \"day\", values_from = \"focal_mean\") %>%\n    select(-ID)\n}) %>%\n  mutate(farm_id = row_number())\n# If you want the sf object it's here!\n\nfarms_w_temp_df <- farms %>%\n  left_join(temp_data, by = c(\"farm_id\" = \"farm_id\")) %>%\n  pivot_longer(names_to = \"day\", values_to = \"temp_c\", cols = starts_with(\"day_\"))\n```\n:::\n\n\n\n# Missing data\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Check which farms have missing temp data\"}\n(\n  missing_temp_farms <- farms_w_temp_df %>% \n    filter(temp_c %>% is.na()) %>% \n    group_by(farm_id) %>% \n    reframe(num_missing = n())\n)\n\n# How far apart in the sequence are the farms? If the previous is complete we should be able to use the one before in the same country\ndiff(missing_temp_farms$farm_id)\n\n# Make the farm list\nfarm_list <- farms_w_temp_df %>%\n  group_by(farm_id) %>% \n  group_split()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Loop through and assigned temp of farms missing temp data, to the farm adjacent (the nearest complete index before)\"}\nfor(i in 1:length(farm_list)){\n  message(\"Checking temp data for \", unique(farm_list[[i]]$farm_id)) \n  if(unique(is.na(farm_list[[i]]$temp_c))){ #if temp data is NA see below\n    cat(\"Is the previous farm index the same country?\")\n    if(unique(farm_list[[i-1]]$country) == unique(farm_list[[i]]$country)){\n      if(!unique(is.na(farm_list[[i-1]]$temp_c))){ # if the farm index before is NOT NA, use that.\n        farm_list[[i]]$temp_c <- farm_list[[i-1]]$temp_c\n      } else {\n        farm_list[[i]]$temp_c <- farm_list[[i-2]]$temp_c.  #else use the farm index 2 before (the missing_farm_\n      }\n    } else {stop(\"Previous country index not the same\")} #if the previous country is not the same country stop the loop\n  }\n}\n\n# Check again - looks good - no values.\nbind_rows(farm_list) %>%  filter(temp_c %>% is.na()) %>% pull(farm_id) %>% unique()\n\n# Save the new locations data \nfarms_w_temp_df <- bind_rows(farm_list)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Save data\"}\n# With geometry, for plotting\nqsave(x = farms_w_temp_df, \n      file = file.path(input_farm_coords_path, sprintf(\"%s_locations_w_temps.qs\", this_species)))\n\n# Without geometry, for targets\nsf::st_drop_geometry(farms_w_temp_df) %>%\n  write_parquet(file.path(input_farm_sst_path, \"farm_SST_extracted.parquet\"))\n```\n:::\n\n\n\n# Omit farms\n\nFarms are omitted if the mean farm temp <= 6$^\\circ$C.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Get the mean temps for each farm and omit farms that are too cold\"}\nmean_farm_temp <- farm_list %>% \n  map_df(.f = function(x){\n    data.frame(farm_id = unique(x$farm_id), \n               mean_temp = mean(x$temp_c),\n               country = unique(x$country),\n               volume = unique(x$tonnes_per_farm))\n  })\n\nfarms_to_omit <- mean_farm_temp %>% \n  filter(mean_temp <= 6) %>% \n  pull(farm_id)\n\nqsave(x = farms_to_omit, \n      file = file.path(input_farm_coords_path, sprintf(\"%s_farms_to_omit.qs\", this_species)))\n```\n:::\n",
    "supporting": [
      "04_extracting_temperatures_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}