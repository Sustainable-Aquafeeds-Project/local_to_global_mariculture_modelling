{
  "hash": "012bba8a3090208b9aa69576fd33c1c1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"08_relative_N_inputs\"\nauthor: Tormey Reimer\ndate: today\neditor: source\n---\n\n\n\n# Introduction\n\nThe purpose of this markdown is to:\n\n1. Import and clean up background nitrogen data\n2. Overlay background nitrogen and Atlantic salmon farm locations\n3. Compare annual inputs from the different sources\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"R setup\"}\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(stringr)\nlibrary(here)\nlibrary(terra)\nlibrary(sf)\nlibrary(qs)\nlibrary(ggplot2)\nlibrary(tidyterra)\nlibrary(cowplot)\nlibrary(rnaturalearth)\nlibrary(purrr)\n\nsource(\"00_dirs.R\")\nfeed_pal <- c(\"past\" = \"#E41A1C\", \"reference\" = \"#377EB8\", \"future\" = \"#4DAF4A\")  \n\nprettyplot <- function() {\n  theme_classic() +\n    theme(legend.position = \"none\",\n          text = element_text(family = \"serif\", size = 12, colour = \"black\"),\n          axis.title.x = element_text(vjust = 0.5),\n          axis.title.y = element_text(hjust = 0.5))\n}\n```\n:::\n\n\n\n# Base rasters for resolution\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Create some blank rasters with parameters to be used going forward\"}\ninset_boxes <- list(\n  CAN1 = c(-132, -122, 47.75, 54.25),\n  CAN2 = c(-70, -54, 43, 48.5),\n  EUR = c(-26, 30, 51, 72),\n  CHI = c(-77.5, -62.5, -56, -25),\n  AUS = c(144, 149.5, -44, -39.75)\n)\n\nbase_wgs84 <- rast(res = c(0.008333333, 0.008333333), extent = ext(c(-180, 180, -90, 90)), crs = \"EPSG:4326\")\nbase_molle <- rast(res = c(1000, 1000), extent = ext(c(-18040096, 18040096, -9020048, 9020048)), crs = \"ESRI:54009\")\n\nwgs84_insets <- inset_boxes %>% \n  lapply(function(bx) {crop(base_wgs84, ext(bx))}) \n\nmolle_insets <- wgs84_insets %>% \n  lapply(function(rs) {project(rs, crs(base_molle))}) %>% \n  lapply(function(rs) {ext(rs)}) %>% \n  lapply(function(ex) {crop(base_molle, ex)})\n```\n:::\n\n\n\n# Raw background nitrogen\n\nData for nutrient runoff from agriculture fertilisers and pesticides was downloaded from @halpern_recent_2019-1 [dataset here: @halpern_recent_2019]. The data is in annual tonnes N.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Import data from @halpern_recent_2019 and crop/reproject for the 5 insets being used\"}\nhalpern_N_rast <- file.path(input_Ndata_path, \"halpern_2019\", \"nutrient_pollution_2013_raw.tif\") %>%\n  rast()\n\nhalpern_insets <- molle_insets %>% \n  lapply(function(ins) {project(halpern_N_rast, ins, method = \"cubic\")})\n```\n:::\n\n\n\nData for inputs of human sewage in coastal ecosystems was sourced from @tuholske_global_2021 [dataset here: @tuholske_mapping_2021]. The data is in annual g N.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Import data from @tuholske_global_2021 and crop/reproject for the 5 insets being used\"}\ntuholske_N_rast <- file.path(input_Ndata_path, \"tuholske_2021\", \"global_effluent_2015_tot_N.tif\") %>%\n  rast() \ntuholske_N_rast <- tuholske_N_rast * 10^-6 # Change from g to t\n\n# Change to the Molleweide projection with insets\ntuholske_insets <- molle_insets %>% \n  lapply(function(ins) {project(tuholske_N_rast, ins, method = \"cubic\")})\n\n# The halpern data has NA values for land but the tuholske data does not, so mask\ntuholske_insets <- map2(tuholske_insets, halpern_insets, function(rast, mask) {\n  mask(rast, mask)\n})\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Combine and save background N data\"}\nbackground_N_insets <- map2(\n  halpern_insets, \n  tuholske_insets, \n  function(halpern, tuholske) {\n    halpern + tuholske\n  })\n\nmap2(names(halpern_insets), background_N_insets, function(nm, rast) {\n  writeRaster(rast, \n              file.path(input_Ndata_path, str_c(\"background_N_inset_\", nm, \".tif\")), \n              overwrite = T)\n})\n```\n:::\n\n\n\nThe code above was only run once, background N rasters can now be loaded.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Load previously saved inset rasters\"}\nbackground_N_insets <- lapply(names(inset_boxes), function(nm) {\n  file.path(input_Ndata_path, str_c(\"background_N_inset_\", nm, \".tif\")) %>% rast()\n})\n```\n:::\n\n\n\n# Combine modelled N data with background N\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Bring in modelled salmon inputs data\"}\nfarm_locs <- file.path(output_farm_data_path, \"farm_geometry.qs\") %>% qs::qread()\nfarm_sfs <- st_sf(farm_id = farm_locs$farm_id, geometry = farm_locs$geometry) %>% \n  st_transform(crs = crs(base_molle))\nfarm_id_insets <- background_N_insets %>% \n  lapply(function(ins) {rasterize(farm_sfs, ins, field = \"farm_id\")})\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Get background nitrogen data for farm cells\"}\nfarm_cells <- map(background_N_insets, function(back_N_rast) {\n  # Get cell numbers for each farm point\n  farm_cells <- cellFromXY(back_N_rast, st_coordinates(farm_sfs))\n  farm_cells <- farm_locs %>% \n    mutate(cell = farm_cells) %>% \n    filter(!is.na(cell))\n  \n  # Extract nutrient values and combine with cell_ids\n  farm_cells$back_N <- terra::extract(back_N_rast$nutrient_pollution_2013_raw,\n                                      farm_cells$cell)$nutrient_pollution_2013_raw\n  \n  # Fill gaps from original data with 8 neighbours\n  farm_cells_gaps <- farm_cells %>% filter(is.na(back_N))\n  for (i in 1:nrow(farm_cells_gaps)) {\n    adj_cells <- adjacent(back_N_rast$nutrient_pollution_2013_raw, \n                          cells = farm_cells_gaps$cell[i], directions = 8)\n    adj_cells_N <- back_N_rast$nutrient_pollution_2013_raw[adj_cells[1,]] %>% \n      pull(nutrient_pollution_2013_raw) %>% \n      mean(na.rm = T)\n    farm_cells_gaps$back_N[i] <- adj_cells_N\n  }\n  farm_cells <- farm_cells %>% \n    filter(!is.na(back_N)) %>% \n    rbind(farm_cells_gaps)\n\n  # Fill gaps from original data with 16 neighbours\n  farm_cells_gaps <- farm_cells %>% filter(is.na(back_N))\n  if (nrow(farm_cells_gaps) != 0) {\n      for (i in 1:nrow(farm_cells_gaps)) {\n      adj_cells <- adjacent(back_N_rast$nutrient_pollution_2013_raw, \n                            cells = farm_cells_gaps$cell[i], directions = 16)\n      adj_cells_N <- back_N_rast$nutrient_pollution_2013_raw[adj_cells[1,]] %>% \n        pull(nutrient_pollution_2013_raw) %>% \n        mean(na.rm = T)\n      farm_cells_gaps$back_N[i] <- adj_cells_N\n    }\n    farm_cells <- farm_cells %>% \n      filter(!is.na(back_N)) %>% \n      rbind(farm_cells_gaps)\n  }\n  \n  default_val <- exp(median(log(farm_cells$back_N), na.rm = T))\n  farm_cells$back_N[is.na(farm_cells$back_N)] <- default_val\n  farm_cells$back_N[farm_cells$back_N < 0] <- default_val\n  farm_cells\n}) %>% \n  bind_rows()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nN_input <- output_cohorts_data_path %>% list.files(full.names = T) %>% \n  str_subset(\"allfarms\") %>% \n  str_subset(\"P_excr\") %>% \n  qs::qread() %>% \n  mutate(mean = mean * 6.25) %>% \n  group_by(farm_ID, feed) %>% \n  reframe(mean = sum(mean) * 10^-6) %>% \n  pivot_wider(names_from = feed, values_from = mean)\n\nN_comp <- merge(farm_cells, N_input, by.y = \"farm_ID\", by.x = \"farm_id\", all = T) %>% \n  select(-cell) %>% \n  mutate(reference = reference/back_N,\n         past = past/back_N,\n         future = future/back_N) %>% \n  pivot_longer(names_to = \"feed\", names_transform = list(feed = as.factor),\n               values_to = \"ratio\", cols = c(\"reference\", \"past\", \"future\")) %>% \n  mutate(feed = factor(feed, levels = c(\"reference\", \"past\", \"future\")))\n```\n:::\n\n\n\n# Analyse\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN_comp %>%\n  group_by(country, farm_id, feed) %>% \n  reframe(mean = mean(ratio, na.rm = T)) %>% \n  pivot_wider(names_from = feed, values_from = mean) %>% \n  mutate(past = (past-reference)/reference,\n         future = (future-reference)/reference) %>% \n  select(-reference) %>% \n  pivot_longer(names_to = \"feed\", values_to = \"mean_ratio\", cols = c(past, future)) %>% \n  ggplot(aes(x = country, y = mean_ratio, fill = feed)) +\n  geom_boxplot() +\n  prettyplot() +\n  scale_y_continuous(breaks = seq(0,1,0.2), labels = seq(0,100,20), limits = c(0,0.6)) +\n  scale_fill_manual(values = feed_pal) +\n  labs(y = \"Mean change in N input ratio\", x = \"Country\")\n\nN_comp %>% \n  filter(log(ratio) < 20) %>%\n  ggplot(aes(x = country, y = log(ratio), fill = feed)) +\n  geom_boxplot() +\n  prettyplot() +\n  # scale_y_continuous(breaks = seq(0,1,0.2), labels = seq(0,100,20), limits = c(0,0.6)) +\n  scale_fill_manual(values = feed_pal) +\n  labs(y = \"Mean change in N input ratio\", x = \"Country\")\n```\n:::\n",
    "supporting": [
      "08_relative_N_inputs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}