---
title: "3_european_seabass_model"
format: html
editor: visual
---

Setup

```{r, message=FALSE}
library(tidyverse)
library(here)


species <- "gilthead_seabream"

this_path <- sprintf(here("data/%s"), species)

```

Data loader module

```{r}

# pull in data for interpolation

data_loader <- \(this_path){
  
  temp <-  read.csv(file.path(this_path, "forcings/Water_temperature.csv"), sep = ",", header = FALSE)
  
  feed <- read.csv(file.path(this_path, "forcings/Feeding.csv"), sep = ",", header = FALSE)
  
  params  <-  read.csv(file.path(this_path,"params/Parameters.csv"), sep = ",")
  
  timeT  <-  as.matrix(temp[, 1])
  
  temp  <-  as.double(as.matrix(temp[, 2]))
  
  timeG <-  as.matrix(feed[, 1])
  
  feed <-  as.double(as.matrix(feed[, 2]))
  
  dates <-  params[22:23, 3] #start and end of the feeding trial
  
  t0 <-  min(as.numeric(as.Date(timeT[1], "%d/%m/%Y")), as.numeric(as.Date(timeG[1], "%d/%m/%Y"))) #This takes the earliest of the feeding dates and the SST date records
  
  ti <-  as.numeric(as.Date(dates[1], "%d/%m/%Y")) - t0 #integration start minus t0 (difference between integration start and the first input data)
  
  tf <-  as.numeric(as.Date(dates[2], "%d/%m/%Y")) - t0 #integration end minus t0 (difference between integration end and the first input data)
  
  timeTseries <-  as.numeric(as.Date(timeT, "%d/%m/%Y")) - t0 #creates day number time series for temperature
  
  timeGseries <-  as.numeric(as.Date(timeG, "%d/%m/%Y")) - t0 #creates day number times series for feeding
  
  Ttem <-  as.vector(matrix(0, nrow = ti - 1)) #
  
  Gtem <-  as.vector(matrix(0, nrow = ti - 1))
  
  i <-  ti:tf + 1
  
  Ttem2 <-  approx(timeTseries, temp, xout = i)
  Gtem2 <-  approx(timeGseries, feed, xout = i)
  Tint <- c(Ttem, Ttem2$y)
  Gint <-  c(Gtem, Gtem2$y)
  
  
  daysT <- seq(as.Date(timeT[1], format = "%d/%m/%Y"), by = "days",   length = length(Tint))
  daysG <- seq(as.Date(timeG[1], format = "%d/%m/%Y"), by = "days",  length = length(Tint))
  
  
  if ((ti < (as.numeric(as.Date(timeT[1], "%d/%m/%Y")) - t0)) | 
      (ti < (as.numeric(as.Date(timeG[1], "%d/%m/%Y")) - t0))) {
    message("ERROR: forcings are beginning after the specified integration start\n")
    message("Impossible to proceed with interpolation\n")
  }
  if ((ti > (as.numeric(as.Date(timeT[length(timeT)], "%d/%m/%Y")) - 
             t0)) | (ti > (as.numeric(as.Date(timeG[length(timeG)], 
                                              "%d/%m/%Y")) - t0))) {
    message("ERROR: forcing are ending before the specified integration end\n")
    message("Impossible to proceed with interpolation\n")
  }
  
  forcings <-  list(daysT, Tint, daysG, Gint)
  
  return(forcings)

}


forcings <- data_loader(this_path = this_path)


```

### Individual model

Preprocessing uses the interpolated and tidied data from the data loader

```{r}

#test function
these_forcings <- forcings

input_preprocess <- \(this_path, these_forcings){
  
  message("Data preprocessing")
  
  
  timeT = these_forcings[[1]]
  Tint = these_forcings[[2]]
  timeG = these_forcings[[3]]
  Gint = these_forcings[[4]]
  
  
  param_matrix <-  read.csv(file.path(this_path,"params/Parameters.csv"), sep = ",")
  feed_comp <- read.csv(file.path(this_path, "forcings/Food_characterization.csv"), sep = ",", header = FALSE) 
  
  param_values <-  as.double(as.matrix(param_matrix[1:21, 3]))
  
  dates = param_matrix[22:23, 3] #start and end of integration
  
  IC <- as.double(as.matrix(param_matrix[24, 3])) # initial weight
  
  CS <-  as.double(as.matrix(param_matrix[25, 3])) # commercial size
  
  feed_contibutions <-  as.double(as.matrix(feed_comp[, 1]))
  
  t0<- min(as.numeric(as.Date(timeT[1], "%d/%m/%Y")), as.numeric(as.Date(timeG[1], 
                                                                         "%d/%m/%Y")), as.numeric(as.Date(dates[1], "%d/%m/%Y")))
  timestep <- 1
  
  ti<- as.numeric(as.Date(dates[1], "%d/%m/%Y")) - t0
  
  tf <-  as.numeric(as.Date(dates[2], "%d/%m/%Y")) - t0
  
  weight <-  as.vector(matrix(0, nrow = ti))
  
  weight[ti] <-  IC #creates the initial weight at the start dates
  
  times <- cbind(ti, tf, timestep)
  
  Pcont <-  feed_contibutions[1]
  Lcont  <-  feed_contibutions[2]
  Ccont <-  feed_contibutions[3]    
  
  message("The model will be executed with the following parameters:\n")
  
  #loop through parameters
  for (i in 1:21) {
    cat(paste0(toString(param_matrix[i, 2]), ": ", toString(param_matrix[i, 
                                                                         3]), " ", toString(param_matrix[i, 4])), "\n")
  }
  cat(" \n")
  cat("Weight initial condition is: ", toString(IC), " g\n")
  cat(" \n")
  cat("Integration is performed between ", toString(dates[1]), 
      " and ", toString(dates[2]), "\n")
  cat(" \n")
  cat("The food has the following composition: \n")
  cat(toString(Pcont * 100), "% proteins\n")
  cat(toString(Lcont * 100), "% lipids\n")
  cat(toString(Ccont * 100), "% carbohydrates\n")
  cat(" \n")
  cat("Commercial size is ", toString(CS), " g")
  cat(" \n")
  cat(" \n")
  
  message("Forcings are represented in graphs available at the following folder\n")
  cat(file.path(this_path, "figures\n\n"))
  
  
  message("Temperature plots")
  
  Tintsave = Tint[(ti + 1):tf]
  SaveName <- file.path(this_path, "figures/Temperature_plot.jpg")
  
  #Plot water temperature
  jpeg(SaveName, 800, 600) 
  days <- seq(as.Date(dates[1], format = "%d/%m/%Y"), by = "days",  length = tf - ti)
  plot(days, Tintsave, ylab = "Water temperature (Celsius degrees)",  xlab = "", xaxt = "n", type = "l", cex.lab = 1.4)
  labDates <- seq(as.Date(dates[1], format = "%d/%m/%Y"), tail(days,   1), by = "months")
  axis.Date(side = 1, days, at = labDates, format = "%d %b %y", las = 2) 
  dev.off()
  
  
  message("Feeding plots")
  
  Gintsave = Gint[(ti + 1):tf]
  SaveName <-  file.path(this_path, "figures/Feeding.jpg")
  
  #plot feeding
  jpeg(SaveName, 800, 600)
  days <- seq(as.Date(dates[1], format = "%d/%m/%Y"), by = "days", length = tf - ti)
  plot(days, Gintsave, ylab = "Feed (g/d)", xlab = "", xaxt = "n", type = "l", cex.lab = 1.4)
  labDates <- seq(as.Date(dates[1], format = "%d/%m/%Y"), tail(days, 1), by = "months")
  axis.Date(side = 1, days, at = labDates, format = "%d %b %y", las = 2)
  dev.off()
  
  
  
  outputs <- list(param_values, Tint, Gint, feed_contibutions, IC, times, dates, 
                 CS)
  
  return(outputs)
  
}

outputs <- input_preprocess(this_path = this_path, these_forcings = forcings)


```

Model equations

```{r}

these_params <- outputs[[1]]
these_temps <- outputs[[2]]
this_feeding <- outputs[[3]]
this_feed <- outputs[[4]]
this_initial_condition <- outputs[[5]]
these_start_end_times <- outputs[[6]]



RK_solver <- \(these_params, these_temps, this_feeding, this_feed, this_initial_condition, these_start_end_times){
  
  ti <- these_start_end_times[1]
  tf <- these_start_end_times[2]
  timestep <- these_start_end_times[3]
  weight <- as.vector(matrix(0, nrow = ti))
  weight[ti] <- IC
  wst <- as.matrix(matrix(0, nrow = ti, ncol = 3))
  exc <- as.matrix(matrix(0, nrow = ti, ncol = 3))
  ing <- as.matrix(matrix(0, nrow = ti))
  ingvero <- as.vector(matrix(0, nrow = ti))
  tfun <- as.matrix(matrix(0, nrow = ti, ncol = 2))
  metab <- as.matrix(matrix(0, nrow = ti, ncol = 2))
  O2 <- as.matrix(matrix(0, nrow = ti, ncol = 2))
  NH4 <- as.matrix(matrix(0, nrow = ti, ncol = 2))
  
  for (t in ti:(tf - 1)) {
    this_temp <-  these_temps[t]
    this_feed_avail <-  this_feeding[t]
    this_starting_weight <- weight[t]
    
  equations <- \(these_params, this_temp, this_feed, this_feed_avail, this_starting_weight){
      
      #Parameters
      ingmax  <-  these_params[1]  #maximum ingrestion rate (g/d)
      alpha <-  these_params[2] # feeding catabolism coefficient
      betaprot  <-  these_params[3] # assimilation coefficient for protein
      betalip <-  these_params[4]  # assimilation coefficient for lipid
      betacarb <-  these_params[5]# assimilation coefficient for carbohydrate
      epsprot <-  these_params[6] # energy content of protein (J/g protein)
      epslip <-  these_params[7] #energy content of lipid (J/g lipid)
      epscarb <-  these_params[8] # energy content of carbohydrates (J/g carbohydrate)
      epsO2<-  these_params[9] # energy consumed by respiration of 1 g of O2
      pk <-  these_params[10] # temperature coefficient for fasting catabolism
      k0 <-  these_params[11] # fasting catabolism at 0oC
      m <-  these_params[12] # weight exponent for the anabolism
      n <-  these_params[13] # weight exponent for the catabolism
      betac <-  these_params[14] # shape coefficient for H(Tw) function
      Tma <-  these_params[15] #maximum lethal temperature for Sparus aurata
      Toa <-  these_params[16] #optimal temperature for Sparus aurata
      Taa <- these_params[17] #Lowest feeding temperature for sparus aurata
      omega <-  these_params[18] #oxygen consumption weight loss ratio
      a  <-  these_params[19] #energy content of fish
      k <- these_params[20] #weight exponent for energy content
      eff <-  these_params[21] #food ingestion efficiency
      
      
      # FORCINGS
      
      #Feed composition
      
      Pcont=this_feed[1]       # Percentage of proteins in the food
      Lcont=this_feed[2]       # Percentage of lipids in the food
      Ccont=this_feed[3]       #  Percentage of carbohydrates in the food
      
      
      ######
      
      #temp
      this_temp <- this_temp
      
      #feed
       this_feed_avail <- this_feed_avail
      
      
      # EXPRESSIONS FOR NET ANABOLISM
      
      #H(Tw) function - temperature dependence function for anabolism
      HTw = (((Tma-temp_local)/(Tma-Toa))^betac*Tma) * exp(betac*(temp_local-Toa))
    
      ing_local = ingmax*HTw*(this_starting_weight^m) # Potential ingestion rate with maximum ingestion scaled 
      
      #temperature limitation - no feeding over lethal temperatures, no feeding below minimum feeding temperatures
       if(temp_local>Tma | temp_local<Taa){
        ing_local <- 0
      }
      
      #food limitation
      ingvero_local = if_else(ing_local>=this_feed_avail, true = this_feed_avail, false = ing_local) #creates feed availability as the ceiling for ingestion
      
      #Anabolism 
      anab = (1-alpha)*ingvero_local*(Pcont*epsprot*betaprot + Ccont*epscarb*betacarb + Lcont*epslip*betalip) # [J day-1]
      
      ######
      
      # EXPRESSIONS FOR NET CATABOLISM
      
      # K(Tw) function - temperature dependence function for catabolism
      KTw = exp(pk*temp_local)
      
      #Catabolism
      catab = epsO2*k0*KTw*this_starting_weight^n #(J day-1)
      
      
      # Respiration 
      oxygen <- k0*KTw*(this_starting_weight^n) #daily respiration rate (g O2 day-1)
      O2 <- c(0,oxygen)
      
      ammonia <- c(0, oxygen*0.06)
      
      #Anabolic and catabolic temperature functions
      temperaturefun <- c(HTw, KTw)
      
      ######
      
      #METABOLISM AND GROWTH
      
      #energy content of somatic weight
      epstiss = a*this_starting_weight^k
      
      #metabolism
      metab_local = c(anab,catab)
    
      
      #Growth equation
      dw <- (anab-catab)/epstiss
      
      
      # WASTE
      
      #Faeces
      Pexc = ingvero_local*(Pcont*(1-betaprot))
      Cexc = ingvero_local*(Ccont*(1-betacarb))
      Lexc = ingvero_local*(Lcont*(1-betalip))
      exc_local <- c(Pexc, Cexc, Lexc)
      
      #Waste feed 
      wst <- if_else(this_feed_avail >= ingvero_local, true =  this_feed_avail - ingvero_local, false = 0)
      Pwst <- wst*Pcont
      Lwst <- wst*Lcont
      Cwst <- wst*Ccont
      wst_local <- c(Pwst,Lwst,Cwst)
      
      
      output <- list(dw, exc_local, wst_local, ing_local, ingvero_local, temperaturefun, metab_local, O2, ammonia)
      
      return(output)
      
      
    }
    
  output1 <- equations(these_params = these_params, this_temp = this_temp, this_feed = this_feed, this_feed_avail = this_feed_avail, this_starting_weight = weight[t])
  
  dw <- unlist(output1[1])
  
  k1 <-  timestep*dw
  
  Temp_approx <-  approx(seq(from = 1, to = tf, by = timestep), 
            these_temps, xout = (t + timestep/2))
  
  Feeding_approx <- approx(seq(from = 1, to = tf, by = timestep), 
            this_feeding, xout = (t + timestep/2))
  
  output2 <- equations(these_params =  these_params, this_temp =  Temp_approx$y, this_feed_avail = Feeding_approx$y, this_feed = this_feed, this_starting_weight = weight[t] + k1/2)
  
  dw <-  unlist(output2[1])
  
  k2 <- timestep * dw
  
  Temp_approx <-  approx(seq(from = 1, to = tf, by = timestep), 
                         these_temps, xout = (t + timestep/2))
  
  Feeding_approx <-  approx(seq(from = 1, to = tf, by = timestep), 
                            this_feeding, xout = (t + timestep/2))
  
  output3 <- equations(these_params = these_params, this_temp =  Temp_approx$y, this_feed_avail =  Feeding_approx$y, this_feed =  this_feed, 
                       this_starting_weight = weight[t] + k2/2)
  
  dw <-  unlist(output3[1])
  
  k3 <-  timestep * dw
  
  Temp_approx <-  these_temps[t + timestep]
  
  Feeding_approx <-  this_feeding[t + timestep]
  
  output4 <- equations(these_params =  these_params, this_temp = Temp_approx, this_feed_avail = Feeding_approx, this_feed = this_feed, 
                       this_starting_weight = weight[t] + k3)
  
  dw <-  unlist(output4[1])
  
  k4 <- timestep * dw
  
  weight[t + timestep] <-  weight[t] + (k1 + 2 * k2 + 2 * k3 + k4)/6
  
  output5 <- equations(these_params =  these_params, this_temp = these_temps[t + timestep], 
                       this_feed_avail =  this_feeding[t + timestep], this_feed = this_feed, this_starting_weight =  weight[t + timestep])
  
  excretion <- output5[[2]]
  waste <- output5[[3]]
  ingestion <- unlist(output5[4])
  ingestionvero <- unlist(output5[5])
  temperaturefun <- output5[[6]]
  metabolism <- output5[[7]]
  oxygen <- output5[[8]]
  ammonia <- output5[[9]]
  #add to next round
  exc <- rbind(exc, excretion)
  wst <- rbind(wst, waste)
  ing <- c(ing, ingestion)
  ingvero <- c(ingvero, ingestionvero)
  tfun <- rbind(tfun, temperaturefun) 
  metab <- rbind(metab, metabolism)
  O2 <- rbind(O2, oxygen)
  NH4 <- rbind(NH4, ammonia)
  
  }
  
  RK_output <- 
  
  
  
}











Salmon_ind_equations <- function(Param, Temp, Food){
  

  # Food composition definition
  Pcont=Food[1]       # [-] Percentage of proteins in the food
  Lcont=Food[2]       # [-] Percentage of lipids in the food
  Ccont=Food[3]       # [-] Percentage of carbohydrates in the food
  
  # Weight and resource
  tmax    = 366                                   # number of days 
  dt      = 1                                  # time step
  # isave = 1
  # nsave  <- floor(tmax/(dt*isave)) # no. of time slots to save
  days<-(1:tmax)*dt
  
  weight <- rep(0,nsave)
  weight[1]<- 30 # start size in grams
  # 
  # # vectors of the other important growth metrics: intake, functional response, assimilated energy and growth increment
  fgT <- rep(0, nsave)
  frT <- rep(0, nsave)
  Tfun <- rep(0, nsave)
  ing <- rep(0, nsave)
  resource <- rep(0, nsave)
  G <- rep(0, nsave)
  ingvero <- rep(0, nsave)
  epstiss <- rep(0, nsave)
  assE <- rep(0, nsave)
  Pexc <- rep(0, nsave)
  Lexc <- rep(0, nsave)
  Cexc <- rep(0, nsave)
  exc <- rep(0, nsave)
  Pwst <- rep(0, nsave)
  Lwst <- rep(0, nsave)
  Cwst <- rep(0, nsave)
  wst <- rep(0, nsave)
  anab <- rep(0, nsave)
  catab <- rep(0, nsave)
  metab <- rep(0, nsave)
  O2 <- rep(0, nsave)
  NH4 <- rep(0, nsave)
  dw <- rep(0, nsave)

  
  # EQUATIONS
  for (i in 1:(nsave-1)){
    
  # Forcing temperature
  fgT[i]= exp(betac*(Temp[i]-Toa))*((Tma-Temp[i])/(Tma-Toa))^(betac*(Tma-Toa))   # Optimum Temperature dependence for ingestion
  frT[i]= exp(pk*Temp[i])                                                       # Exponential Temperature dependence for catabolism
  # Tfun[i]=cbind(fgT[i], frT[i])                                               # Output with temperature limitation functions
  
  # Ingested mass
  ing[i]=ingmax*(weight[i]^m)*fgT[i]   # [g/d] Potential ingestion rate
  # G=G*eff                      # [g/d] Ingested food (a part of the available food falls through the net)
  resource[i] = 0.066*weight[i]^0.75 # this is taken from the salmon model
  G[i] = eff*resource[i]
  
  # # Lowest feeding temperature threshold
  # if (Temp<Taa) {
  #   ing=0
  # }
  
  # reduced feeding at temps higher than optimal temp
  if (Temp[i]>Toa) {
    ing[i] = 0
  }
  
  # Available food limitation
  if (ing[i] > G[i]) {
    ingvero[i] = G[i]         # [g/d] Actual ingestion rate
  }  else {
    ingvero[i] = ing[i]     # [g/d] Actual ingestion rate
  }
  
  # Energy content of somatic tissue [J/g] Source: Lupatsch et al. (2003)
  epstiss[i] = a*weight[i]^k
  
  # Ingested energy
  diet = Pcont*epsprot*betaprot+Lcont*epslip*betalip+Ccont*epscarb*betacarb # [J/g] Energy content of the ingested food
  assE[i] = ingvero[i]*diet # [J/d] Ingested energy
  
  # Compute excretion (not sure if this is actually dissolved inorganic nutrients)
  Pexc[i] = (1-betaprot)*Pcont*ingvero[i]  # Excreted proteins [g/d]
  Lexc[i] = (1-betalip)*Lcont*ingvero[i]   # Excreted lipids [g/d]
  Cexc[i] = (1-betacarb)*Ccont*ingvero[i]  # Excreted carbohydrates [g/d]
  # exc[i]=cbind(Pexc[i],Lexc[i],Cexc[i])        # Output with excretion values
  
  # Compute waste (this is uneaten feed only - does not include solid faecal matter)
  Pwst[i]=((G[i]/eff)-ingvero[i])*Pcont     # Proteins to waste [g/d]
  Lwst[i]=((G[i]/eff)-ingvero[i])*Lcont     # Lipids to waste [g/d]
  Cwst[i]=((G[i]/eff)-ingvero[i])*Ccont     # Carbohydrates to waste [g/d]
  # wst[i]=cbind(Pwst[i],Cwst[i],Lwst[i])        # Output with waste values
  
  # Metabolism terms
  anab[i]=assE[i]*(1-alpha)                    # Net anabolism [J/d]
  catab[i]=epsO2*k0*frT[i]*(weight[i]^n)*omega    # Fasting catabolism [J/d]
  # metab[i]=cbind(anab[i],catab[i])                # Output with metabolic rates
  
  # O2 and NH4 produced
  O2[i]=catab[i]/epsO2          # O2 consumed [g02/d]
  NH4[i]=O2[i]*0.06             # NH4 produced [gN/d]
  
  # Mass balance
  dw[i] = (anab[i]-catab[i])/epstiss[i] # weight increment [g/d]
  
  weight[i+1] = weight[i] + dw[i]*dt
  }
  # Function outputs
  output=data.frame(days, weight, dw, epstiss, Pexc, Lexc, Cexc, Pwst, Lwst, 
                    Cwst, ing, ingvero, anab, catab, O2, NH4, resource, fgT, frT, Temp)
  return(output) 
}


param_matrix

```

Main function

```{r}


cat("Sea Bream bioenergetic individual model\n")
cat(" \n")

selector <- "y"

#Bring in forcings and parameters
message("Insert forcings and parameters in the following folder\n")


Param = output[[1]]
Tint = output[[2]]
Gint = output[[3]]
feed = output[[4]]
IC = output[[5]]
times = output[[6]]
Dates = output[[7]]
CS = output[[8]]


#RK solver function

cat("ODE solution\n")

ti = times[1]
tf = times[2]
timestep = times[3]

weight = as.vector(matrix(0, nrow = ti))

weight[ti] = IC

#waste?
wst = as.matrix(matrix(0, nrow = ti, ncol = 3))
#excretion?
exc = as.matrix(matrix(0, nrow = ti, ncol = 3))
#ingestion
ing = as.vector(matrix(0, nrow = ti))

#ingvero?
ingvero = as.vector(matrix(0, nrow = ti))

#temperature function? 
tfun = as.matrix(matrix(0, nrow = ti, ncol = 2))

metab = as.matrix(matrix(0, nrow = ti, ncol = 2))

#oxygen
O2 = as.matrix(matrix(0, nrow = ti, ncol = 2))

#ammonium
NH4 = as.matrix(matrix(0, nrow = ti, ncol = 2))

for (t in ti:(tf - 1)) {
  Tapp = Tint[t]
  Gapp = Gint[t]
  
  output <- Bass_ind_equations(Param, Tapp, Gapp, Food,weight[t])
  
  dw = unlist(output[1])
  k1 = timestep * dw
  Tapp = approx(seq(from = 1, to = tf, by = timestep), 
                Temperature, xout = (t + timestep/2))
  Gapp = approx(seq(from = 1, to = tf, by = timestep), 
                G, xout = (t + timestep/2))
  output <- Bass_ind_equations(Param, Tapp$y, Gapp$y, Food, 
                               weight[t] + k1/2)
  dw = unlist(output[1])
  k2 = timestep * dw
  Tapp = approx(seq(from = 1, to = tf, by = timestep), 
                Temperature, xout = (t + timestep/2))
  Gapp = approx(seq(from = 1, to = tf, by = timestep), 
                G, xout = (t + timestep/2))
  output <- Bass_ind_equations(Param, Tapp$y, Gapp$y, Food, 
                               weight[t] + k2/2)
  dw = unlist(output[1])
  k3 = timestep * dw
  Tapp = Temperature[t + timestep]
  Gapp = G[t + timestep]
  output <- Bass_ind_equations(Param, Tapp, Gapp, Food, 
                               weight[t] + k3)
  dw = unlist(output[1])
  k4 = timestep * dw
  weight[t + timestep] = weight[t] + (k1 + 2 * k2 + 2 * 
                                        k3 + k4)/6
  output <- Bass_ind_equations(Param, Temperature[t + timestep], 
                               G[t + timestep], Food, weight[t + timestep])
  excretion = output[[2]]
  waste = output[[3]]
  ingestion = unlist(output[4])
  ingestionvero = unlist(output[5])
  temperaturefun = output[[6]]
  metabolism = output[[7]]
  oxygen = output[[8]]
  ammonia = output[[9]]
  wst = rbind(wst, waste)
  exc = rbind(exc, excretion)
  ing = rbind(ing, ingestion)
  ingvero = rbind(ingvero, ingestionvero)
  tfun = rbind(tfun, temperaturefun)
  metab = rbind(metab, metabolism)
  O2 = rbind(O2, oxygen)
  NH4 = rbind(NH4, ammonia)
}
output = list(weight, exc, wst, ing, ingvero, tfun, metab,  O2, NH4)













  out_RKsolver <- Bream_ind_RKsolver(Param, Tint, Gint, feed, 
                                   IC, times)
out_post <- Bream_ind_post(userpath, out_RKsolver, times, 
                           Dates, CS)
cat(" ")
cat("End")
return(out_post)

```
