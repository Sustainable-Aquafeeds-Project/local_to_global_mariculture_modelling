---
title: "3_european_seabass_model"
format: html
editor: visual
---

Setup

```{r}
library(tidyverse)
library(here)


species <- "european_seabass"

```

Data loader module

```{r}


temp_data <-  read.csv(sprintf(here("data/forcings/%s_forcings/Water_temperature.csv"), species), sep = ",", header = FALSE)

feed_rations <- read.csv(sprintf(here("data/forcings/%s_forcings/Feeding.csv"), species), sep = ",", header = FALSE)

params  <-  read.csv(sprintf(here("data/parameters/%s_parameters/Parameters.csv"), species), sep = ",")

timeT  <-  as.matrix(temp_data[, 1])

temp  <-  as.double(as.matrix(temp_data[, 2]))

timeG <-  as.matrix(feed_rations[, 1])

feed_amount <-  as.double(as.matrix(feed_rations[, 2]))
    
dates <-  params[22:23, 3] #start and end of the feeding trial

t0 <-  min(as.numeric(as.Date(timeT[1], "%d/%m/%Y")), as.numeric(as.Date(timeG[1], "%d/%m/%Y"))) #This takes the earliest of the feeding dates and the SST date records

ti <-  as.numeric(as.Date(dates[1], "%d/%m/%Y")) - t0 #integration start minus t0 (difference between integration start and the first input data)

tf <-  as.numeric(as.Date(dates[2], "%d/%m/%Y")) - t0 #integration end minus t0 (difference between integration end and the first input data)

timeTseries <-  as.numeric(as.Date(timeT, "%d/%m/%Y")) - t0 #creates day number time series for temperature

timeGseries <-  as.numeric(as.Date(timeG, "%d/%m/%Y")) - t0 #creates day number times series for feeding

Ttem <-  as.vector(matrix(0, nrow = ti - 1)) #

Gtem <-  as.vector(matrix(0, nrow = ti - 1))

i <-  ti:tf + 1

Ttem2 <-  approx(timeTseries, temp, xout = i)
Gtem2 <-  approx(timeGseries, feed_amount, xout = i)
Tint <- c(Ttem, Ttem2$y)
Gint <-  c(Gtem, Gtem2$y)


daysT <- seq(as.Date(timeT[1], format = "%d/%m/%Y"), by = "days",   length = length(Tint))
daysG <- seq(as.Date(timeG[1], format = "%d/%m/%Y"), by = "days",  length = length(Tint))


 if ((ti < (as.numeric(as.Date(timeT[1], "%d/%m/%Y")) - t0)) | 
        (ti < (as.numeric(as.Date(timeG[1], "%d/%m/%Y")) - t0))) {
        message("ERROR: forcings are beginning after the specified integration start\n")
        message("Impossible to proceed with interpolation\n")
    }
    if ((ti > (as.numeric(as.Date(timeT[length(timeT)], "%d/%m/%Y")) - 
        t0)) | (ti > (as.numeric(as.Date(timeG[length(timeG)], 
        "%d/%m/%Y")) - t0))) {
        message("ERROR: forcing are ending before the specified integration end\n")
        message("Impossible to proceed with interpolation\n")
    }

forcings <-  list(daysT, Tint, daysG, Gint)

```

### Individual model

Preprocessing

```{r}

message("Data preprocessing")
 

timeT = forcings[[1]]
Tint = forcings[[2]]
timeG = forcings[[3]]
Gint = forcings[[4]]


param_matrix <-  read.csv(sprintf(here("data/parameters/%s_parameters/Parameters.csv"), species), sep = ",")
feed_comp <- read.csv(sprintf(here("data/forcings/%s_forcings/Food_characterization.csv"), species), sep = ",", header = FALSE)

param_values <-  as.double(as.matrix(param_matrix[1:21, 3]))

dates = param_matrix[22:23, 3] #start and end of integration

IC <- as.double(as.matrix(param_matrix[24, 3])) # initial weight

CS <-  as.double(as.matrix(param_matrix[25, 3])) # commercial size

feed_contibutions <-  as.double(as.matrix(feed_comp[, 1]))

t0<- min(as.numeric(as.Date(timeT[1], "%d/%m/%Y")), as.numeric(as.Date(timeG[1], 
                                                                       "%d/%m/%Y")), as.numeric(as.Date(dates[1], "%d/%m/%Y")))
timestep <- 1

ti<- as.numeric(as.Date(dates[1], "%d/%m/%Y")) - t0

tf <-  as.numeric(as.Date(dates[2], "%d/%m/%Y")) - t0

weight <-  as.vector(matrix(0, nrow = ti))

weight[ti] <-  IC #creates the initial weight at the start dates

times <- cbind(ti, tf, timestep)

Pcont = feed_contibutions[1]
Lcont = feed_contibutions[2]
Ccont = feed_contibutions[3]    

message("The model will be executed with the following parameters:\n")

#loop through parameters
for (i in 1:21) {
  cat(paste0(toString(Param_matrix[i, 2]), ": ", toString(Param_matrix[i, 
                                                                       3]), " ", toString(Param_matrix[i, 4])), "\n")
}
cat(" \n")
cat("Weight initial condition is: ", toString(IC), " g\n")
cat(" \n")
cat("Integration is performed between ", toString(dates[1]), 
    " and ", toString(dates[2]), "\n")
cat(" \n")
cat("The food has the following composition: \n")
cat(toString(Pcont * 100), "% proteins\n")
cat(toString(Lcont * 100), "% lipids\n")
cat(toString(Ccont * 100), "% carbohydrates\n")
cat(" \n")
cat("Commercial size is ", toString(CS), " g")
cat(" \n")
cat(" \n")

cat("Forcings are represented in graphs available at the following folder\n")
message(sprintf(here("figures/forcings/%s_plots"), species))

message("Temperature plots")

Tintsave = Tint[(ti + 1):tf]
SaveName <- sprintf(here("figures/forcings/%s_plots/%s_water_temperature.jpg"), species, species)

#Plot water temperature
jpeg(SaveName, 800, 600) 
days <- seq(as.Date(dates[1], format = "%d/%m/%Y"), by = "days",  length = tf - ti)
plot(days, Tintsave, ylab = "Water temperature (Celsius degrees)",  xlab = "", xaxt = "n", type = "l", cex.lab = 1.4)
labDates <- seq(as.Date(dates[1], format = "%d/%m/%Y"), tail(days,   1), by = "months")
axis.Date(side = 1, days, at = labDates, format = "%d %b %y", las = 2) 
dev.off()


message("Feeding plots")

Gintsave = Gint[(ti + 1):tf]
SaveName <-  sprintf(here("figures/forcings/%s_plots/%s_feeding.jpg"), species, species)

#plot feeding
jpeg(SaveName, 800, 600)
days <- seq(as.Date(dates[1], format = "%d/%m/%Y"), by = "days", length = tf - ti)
plot(days, Gintsave, ylab = "Feed (g/d)", xlab = "", xaxt = "n", type = "l", cex.lab = 1.4)
labDates <- seq(as.Date(dates[1], format = "%d/%m/%Y"), tail(days, 1), by = "months")
axis.Date(side = 1, days, at = labDates, format = "%d %b %y", las = 2)
dev.off()



output <- list(param_values, Tint, Gint, feed_contibutions, IC, times, dates, 
              CS)

```


Equations
```{r}

Param <- output[[1]]
param_matrix

ind_equations <- \(Param, Temp, Feed){
  
#Parameters
ingmax = Param[1]  #maximum ingrestion rate (g/d)
alpha = Param[2] # feeding catabolism coefficient
betaprot = Param[3] # assimilation coefficient for protein
betalip # assimilation coefficient for lipid
betacarb # assimilation coefficient for carbohydrate
epsprot # energy content 
epslip
epscarb 
epsO2
pk
k0
m

  
  

  
}

```






Salmon_ind_equations <- function(Param, Temp, Food){
  
  # Parameters definition
  ingmax=Param[1]        # [g/d] Maximum ingestion rate
  alpha=Param[2]         # [-] Feeding catabolism coefficient
  betaprot=Param[3]      # [-] Assimilation coefficient for protein
  betalip=Param[4]       # [-] Assimilation coefficient for lipid
  betacarb=Param[5]      # [-] Assimilation coefficient for carbohydrates
  epsprot=Param[6]       # [J/gprot] Energy content of protein
  epslip=Param[7]        # [J/glip] Energy content of lipid
  epscarb=Param[8]       # [J/gcarb] Energy content of carbohydrate
  epsO2=Param[9]         # [J/gO2] Energy consumed by the respiration of 1g of oxygen
  pk=Param[10]           # [1/day] Temperature coefficient for the fasting catabolism
  k0=Param[11]           # [1/Celsius degree]  Fasting catabolism at 0 Celsius degree
  m=Param[12]            # [-] Weight exponent for the anabolism
  n=Param[13]            # [-] Weight exponent for the catabolism
  betac=Param[14]        # [-]  Shape coefficient for the H(Tw) function
  Tma=Param[15]          # [Celsius degree] Maximum lethal temperature for Dicentrarchus labrax
  Toa=Param[16]          # [Celsius degree] Optimal temperature for Dicentrarchus labrax
  Taa=Param[17]          # [Celsius degree] Lowest feeding temperature for Dicentrarchus labrax
  omega=Param[18]        # [gO2/g] Oxygen consumption - weight loss ratio
  a=Param[19]            # [J/gtissue] Energy content of fish tissue
  k=Param[20]            # [-] Weight exponent for energy content
  eff=Param[21]          # [-] Food ingestion efficiency
  
  # Food composition definition
  Pcont=Food[1]       # [-] Percentage of proteins in the food
  Lcont=Food[2]       # [-] Percentage of lipids in the food
  Ccont=Food[3]       # [-] Percentage of carbohydrates in the food
  
  # Weight and resource
  tmax    = 366                                   # number of days 
  dt      = 1                                  # time step
  # isave = 1
  # nsave  <- floor(tmax/(dt*isave)) # no. of time slots to save
  days<-(1:tmax)*dt
  
  weight <- rep(0,nsave)
  weight[1]<- 30 # start size in grams
  # 
  # # vectors of the other important growth metrics: intake, functional response, assimilated energy and growth increment
  fgT <- rep(0, nsave)
  frT <- rep(0, nsave)
  Tfun <- rep(0, nsave)
  ing <- rep(0, nsave)
  resource <- rep(0, nsave)
  G <- rep(0, nsave)
  ingvero <- rep(0, nsave)
  epstiss <- rep(0, nsave)
  assE <- rep(0, nsave)
  Pexc <- rep(0, nsave)
  Lexc <- rep(0, nsave)
  Cexc <- rep(0, nsave)
  exc <- rep(0, nsave)
  Pwst <- rep(0, nsave)
  Lwst <- rep(0, nsave)
  Cwst <- rep(0, nsave)
  wst <- rep(0, nsave)
  anab <- rep(0, nsave)
  catab <- rep(0, nsave)
  metab <- rep(0, nsave)
  O2 <- rep(0, nsave)
  NH4 <- rep(0, nsave)
  dw <- rep(0, nsave)

  
  # EQUATIONS
  for (i in 1:(nsave-1)){
    
  # Forcing temperature
  fgT[i]= exp(betac*(Temp[i]-Toa))*((Tma-Temp[i])/(Tma-Toa))^(betac*(Tma-Toa))   # Optimum Temperature dependence for ingestion
  frT[i]= exp(pk*Temp[i])                                                       # Exponential Temperature dependence for catabolism
  # Tfun[i]=cbind(fgT[i], frT[i])                                               # Output with temperature limitation functions
  
  # Ingested mass
  ing[i]=ingmax*(weight[i]^m)*fgT[i]   # [g/d] Potential ingestion rate
  # G=G*eff                      # [g/d] Ingested food (a part of the available food falls through the net)
  resource[i] = 0.066*weight[i]^0.75 # this is taken from the salmon model
  G[i] = eff*resource[i]
  
  # # Lowest feeding temperature threshold
  # if (Temp<Taa) {
  #   ing=0
  # }
  
  # reduced feeding at temps higher than optimal temp
  if (Temp[i]>Toa) {
    ing[i] = 0
  }
  
  # Available food limitation
  if (ing[i] > G[i]) {
    ingvero[i] = G[i]         # [g/d] Actual ingestion rate
  }  else {
    ingvero[i] = ing[i]     # [g/d] Actual ingestion rate
  }
  
  # Energy content of somatic tissue [J/g] Source: Lupatsch et al. (2003)
  epstiss[i] = a*weight[i]^k
  
  # Ingested energy
  diet = Pcont*epsprot*betaprot+Lcont*epslip*betalip+Ccont*epscarb*betacarb # [J/g] Energy content of the ingested food
  assE[i] = ingvero[i]*diet # [J/d] Ingested energy
  
  # Compute excretion (not sure if this is actually dissolved inorganic nutrients)
  Pexc[i] = (1-betaprot)*Pcont*ingvero[i]  # Excreted proteins [g/d]
  Lexc[i] = (1-betalip)*Lcont*ingvero[i]   # Excreted lipids [g/d]
  Cexc[i] = (1-betacarb)*Ccont*ingvero[i]  # Excreted carbohydrates [g/d]
  # exc[i]=cbind(Pexc[i],Lexc[i],Cexc[i])        # Output with excretion values
  
  # Compute waste (this is uneaten feed only - does not include solid faecal matter)
  Pwst[i]=((G[i]/eff)-ingvero[i])*Pcont     # Proteins to waste [g/d]
  Lwst[i]=((G[i]/eff)-ingvero[i])*Lcont     # Lipids to waste [g/d]
  Cwst[i]=((G[i]/eff)-ingvero[i])*Ccont     # Carbohydrates to waste [g/d]
  # wst[i]=cbind(Pwst[i],Cwst[i],Lwst[i])        # Output with waste values
  
  # Metabolism terms
  anab[i]=assE[i]*(1-alpha)                    # Net anabolism [J/d]
  catab[i]=epsO2*k0*frT[i]*(weight[i]^n)*omega    # Fasting catabolism [J/d]
  # metab[i]=cbind(anab[i],catab[i])                # Output with metabolic rates
  
  # O2 and NH4 produced
  O2[i]=catab[i]/epsO2          # O2 consumed [g02/d]
  NH4[i]=O2[i]*0.06             # NH4 produced [gN/d]
  
  # Mass balance
  dw[i] = (anab[i]-catab[i])/epstiss[i] # weight increment [g/d]
  
  weight[i+1] = weight[i] + dw[i]*dt
  }
  # Function outputs
  output=data.frame(days, weight, dw, epstiss, Pexc, Lexc, Cexc, Pwst, Lwst, 
                    Cwst, ing, ingvero, anab, catab, O2, NH4, resource, fgT, frT, Temp)
  return(output) 
}
```







Main function
```{r}


cat("Sea Bream bioenergetic individual model\n")
cat(" \n")

selector <- "y"

#Bring in forcings and parameters
message("Insert forcings and parameters in the following folder\n")


Param = output[[1]]
Tint = output[[2]]
Gint = output[[3]]
feed = output[[4]]
IC = output[[5]]
times = output[[6]]
Dates = output[[7]]
CS = output[[8]]


#RK solver function

cat("ODE solution\n")

ti = times[1]
tf = times[2]
timestep = times[3]

weight = as.vector(matrix(0, nrow = ti))

weight[ti] = IC

#waste?
wst = as.matrix(matrix(0, nrow = ti, ncol = 3))
#excretion?
exc = as.matrix(matrix(0, nrow = ti, ncol = 3))
#ingestion
ing = as.vector(matrix(0, nrow = ti))

#ingvero?
ingvero = as.vector(matrix(0, nrow = ti))

#temperature function? 
tfun = as.matrix(matrix(0, nrow = ti, ncol = 2))

metab = as.matrix(matrix(0, nrow = ti, ncol = 2))

#oxygen
O2 = as.matrix(matrix(0, nrow = ti, ncol = 2))

#ammonium
NH4 = as.matrix(matrix(0, nrow = ti, ncol = 2))

for (t in ti:(tf - 1)) {
  Tapp = Tint[t]
  Gapp = Gint[t]
  
  output <- Bass_ind_equations(Param, Tapp, Gapp, Food,weight[t])
  
  dw = unlist(output[1])
  k1 = timestep * dw
  Tapp = approx(seq(from = 1, to = tf, by = timestep), 
                Temperature, xout = (t + timestep/2))
  Gapp = approx(seq(from = 1, to = tf, by = timestep), 
                G, xout = (t + timestep/2))
  output <- Bass_ind_equations(Param, Tapp$y, Gapp$y, Food, 
                               weight[t] + k1/2)
  dw = unlist(output[1])
  k2 = timestep * dw
  Tapp = approx(seq(from = 1, to = tf, by = timestep), 
                Temperature, xout = (t + timestep/2))
  Gapp = approx(seq(from = 1, to = tf, by = timestep), 
                G, xout = (t + timestep/2))
  output <- Bass_ind_equations(Param, Tapp$y, Gapp$y, Food, 
                               weight[t] + k2/2)
  dw = unlist(output[1])
  k3 = timestep * dw
  Tapp = Temperature[t + timestep]
  Gapp = G[t + timestep]
  output <- Bass_ind_equations(Param, Tapp, Gapp, Food, 
                               weight[t] + k3)
  dw = unlist(output[1])
  k4 = timestep * dw
  weight[t + timestep] = weight[t] + (k1 + 2 * k2 + 2 * 
                                        k3 + k4)/6
  output <- Bass_ind_equations(Param, Temperature[t + timestep], 
                               G[t + timestep], Food, weight[t + timestep])
  excretion = output[[2]]
  waste = output[[3]]
  ingestion = unlist(output[4])
  ingestionvero = unlist(output[5])
  temperaturefun = output[[6]]
  metabolism = output[[7]]
  oxygen = output[[8]]
  ammonia = output[[9]]
  wst = rbind(wst, waste)
  exc = rbind(exc, excretion)
  ing = rbind(ing, ingestion)
  ingvero = rbind(ingvero, ingestionvero)
  tfun = rbind(tfun, temperaturefun)
  metab = rbind(metab, metabolism)
  O2 = rbind(O2, oxygen)
  NH4 = rbind(NH4, ammonia)
}
output = list(weight, exc, wst, ing, ingvero, tfun, metab,  O2, NH4)













  out_RKsolver <- Bream_ind_RKsolver(Param, Tint, Gint, feed, 
                                   IC, times)
out_post <- Bream_ind_post(userpath, out_RKsolver, times, 
                           Dates, CS)
cat(" ")
cat("End")
return(out_post)

```

