---
title: "Local to Global Mariculture Modelling"
subtitle: "Project Documentation"
author: "Dr Tormey Reimer"
date: today
execute:
  eval: true
  echo: false
  warning: false
  message: false
  cache: true
  freeze: auto
knitr: 
  opts_chunk:
    fig.align: center
    fig.width: 8.5
format:
  html:
    code-fold: true
---

# Table of Contents

All code and processes for this project are linked below. Note that some scripts require access to raw data which is not stored on Github. 
While this page (the index) has code that runs prior to rendering, all code in the subsequent pages has not been run for rendering.

## Main scripts

The main scripts for this project focus on setting up the model to examine the differences in total protein, carbohydrate, lipid and nitrogen losses between feeds. 

| Page | Description |
|---------|:-------------------------------------------------|
| **[Data Tidying](01_tidying_data.html)** | Initial data tidying and preparation |
| **[Extracting Production Locations](02_extracting_production_locations.html)** | Identification and processing of mariculture production site locations |
| **[Assessing Species Potential](03_assessing_species_potential.html)** | Evaluation of species suitability for different locations |
| **[Extracting Temperatures](04_extracting_temperatures.html)** | SST data extraction and processing for model inputs |
| **[Formulating Feeds](05_formulating_feeds.html)** | Feed composition formulation for model runs |
| **[Running Atlantic Salmon Model](06_run_atlantic_salmon_model.html)** | Atlantic salmon growth model execution |

## Extra scripts

The extra scripts for this project involved some exploration into potential impacts of nutrient losses. These will likely not make it into the final manuscript. 

| Page | Description |
|---------|:-------------------------------------------------|
| **[Species Layers](07_species_layers.html)** | Spatial analysis of species distribution layers |
| **[Relative N Inputs](08_relative_N_inputs.html)** | Analysis of nitrogen input patterns and their relative impacts |

```{r setup}
#| cache: false
#| message: false

library(magrittr)
library(units)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(ggh4x)
library(here)
library(ggpubr)
library(cowplot)
library(patchwork)
library(qs)
library(arrow)
library(targets)
library(sf)
library(terra)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
library(dtplyr)
library(furrr)
library(purrr)
library(future)
library(readxl)
library(conflicted)
library(lubridate)
library(RColorBrewer)
conflicts_prefer(dplyr::select(), dplyr::filter(), dplyr::intersect())
# This markdown uses TinyTex - install with tinytex::install_tinytex()

here("src") %>% list.files(pattern = "\\.R$", full.names = TRUE) %>% walk(source)

packages <- c("magrittr", "dplyr", "tidyr", "stringr", "ggplot2", "arrow", "targets", "sf", "terra", "rnaturalearth", "furrr", "future", "units", "lubridate", "worrms", "aquamapsdata") %>% sort()
```

```{r global-variables}
#| include: false
#| cache: false

remove_unit("g_fish")
remove_unit("kg_fish")
remove_unit("t_fish")
install_unit("g_fish")
install_unit("kg_fish", "1000 g_fish")
install_unit("t_fish", "1000 kg_fish")

species_params <- find_read(output_species_data_path, "species_params")
pop_params <- find_read(output_species_data_path, "pop_params")
  
feed_pal <- c(
  "past" = "#E41A1C", 
  "reference" = "#377EB8", 
  "future" = "#4DAF4A",
  "plant_dominant" = "#4DAF4A",
  "marine_dominant" = "#377EB8",
  "novel_inclusive" = "#E41A1C"
)
cohort_pal <- c("1" = "#E41A1C", "2" = "#377EB8", "3" = "#4DAF4A", "all" = "black")
macro_pal <- c(
  "protein" = "darkred", 
  "P" = "darkred", 
  "carbohydrates" = "steelblue", 
  "C" = "steelblue", 
  "lipids" = "darkgoldenrod1", 
  "L" = "darkgoldenrod1"
)

prettyplot <- function() {
  theme_classic() +
    theme(
      text = element_text(family = "sans", size = 12, colour = "black"),
      legend.position = "none"
    )
}
```

# Supplemental methods {#sec-supp-methods}

```{r}
#| label: location-data

farm_locs <- find_read(output_farm_data_path, "geometry") %>% 
  rename(farm_ID = farm_id)

farm_mean_lat <- farm_locs %>%
  st_centroid() %>%
  mutate(latitude = st_coordinates(.)[, "Y"]) %>%
  st_drop_geometry() %>%
  group_by(country) %>%
  summarise(mean_latitude = mean(latitude, na.rm = TRUE)) %>% 
  arrange(-mean_latitude)

countries <- farm_mean_lat$country
countries[str_detect(countries, "United States of America")] <- "USA"
countries[str_detect(countries, "United Kingdom")] <- "UK"
countries[str_detect(countries, "Russian Federation")] <- "Russia"

farm_locs <- farm_locs %>% 
  mutate(country = factor(country, levels = farm_mean_lat$country, labels = countries))
```

## Population and biomass {#sec-population-biomass}

```{r}
#| label: raw biomass and weight data

weight_cohort <- find_read(output_model_cohort_path, "weight_stat_all_farms")
biomass_cohort <- find_read(output_model_cohort_path, "biomass_stat_all_farms")
```

Each farm's final population was calculated by dividing the production tonnage required by the average modelled individual harvest size for each farm (when feed reference feed, @fig-harvest-size). A population timeseries was then generated using the standard mortality rate (`r round(unname(pop_params['mortmyt'])*100, 3)` % d$^{-1}$). 

```{r}
#| label: fig-harvest-size
#| fig-cap: |
#|   Frequency distribution of harvest sizes used to create the population timeseries for each farm, as predicted by the fish-growth model. 

harv_size <- find_read(output_farm_data_path, "farm_harvest_size")

harv_size %>% 
  mutate(weight = weight %>% set_units("g") %>% set_units("kg")) %>% 
  select(c(farm_ID, weight)) %>% 
  ggplot(aes(x = weight)) +
  geom_histogram(binwidth = 0.25, colour = "black", fill = "salmon", alpha = 0.75) +
  scale_y_continuous(limits = c(0,500)) +
  labs(y = "Frequency", x = "Harvest weight") +
  prettyplot() +
  theme(aspect.ratio = 0.75)
```

Using this method, a farm's 'population' is not a good representation of the actual number of individuals being farmed, but it ensures each farm location is producing the correct tonnage while allowing comparisons between the different feeds. 

```{r}
#| label: fig-cohorts
#| eval: false
#| fig-cap: | 
#|   Example of how the overlapping cohorts combine into a single farm production curve (in this case biomass). The left plot shows the farm biomass produced by each cohort from initialisation to harvest, while the right plot shows the combined farm biomass over the course of a single production period of 548 days.

df <- find_read(output_model_farm_path, "dw_") %>% 
  mutate(
    mean = set_units(mean, "g") %>% set_units("t"),
    sd = set_units(sd, "g") %>% set_units("t")
  ) %>% 
  select(-farm_ID)

df <- rbind(
  df %>% mutate(cohort = 1),
  df %>% mutate(t = t+365, cohort = 2),
  df %>% mutate(t = t+730, cohort = 3)
) %>% 
  mutate(t = (t-min(t))+1,
         split = "Split by cohort")

min_t <- min(df$t[df$cohort == 2])
max_t <- max(df$t[df$cohort == 2])

df_2 <- df %>% 
  filter(t %in% min_t:max_t) %>% 
  group_by(t) %>% 
  reframe(
    sd_mean = sqrt(sum(sd_mean^2)),
    mean = sum(mean),
    sd = sd_mean*mean
  ) %>% 
  mutate(
    cohort = "all",
    split = "Totalled"
  )

df <- rbind(df, df_2) %>% 
  mutate(cohort = as.factor(cohort))

ggplot(df, aes(x = t, y = mean, ymin = mean-sd, ymax = mean+sd, colour = as.factor(cohort))) +
  geom_line(linewidth = 0.75) +
  geom_ribbon(linetype = "dotted", alpha = 0) +
  facet_grid(cols = vars(split)) +
  scale_x_continuous(breaks = seq(0, 1600, 120)) +
  scale_colour_manual(values = cohort_pal) +
  prettyplot() +
  labs(y = "Farm biomass", x = "Day of production")
```

```{r}
#| label: pop-biom-data

biomass_farm <- find_read(output_model_farm_path, "biomass_stat") %>% 
  group_by(farm_ID, feed) %>% 
  slice_max(t) %>% 
  ungroup()

production <- find_read(output_farm_data_path, "farm_static_data") %>% 
  merge(biomass_farm, by = "farm_ID", all.x = F) %>% 
  mutate(
    mean = set_units(mean, "g"),
    diff = set_units(mean - tonnes_per_farm, "t"),
    perc_diff = diff/tonnes_per_farm
  ) %>% 
  group_by(country, feed) %>% 
  reframe(
    min_percdiff = min(perc_diff),
    max_percdiff = max(perc_diff),
    mean_percdiff = mean(perc_diff)
  )
```

By this method, farm biomass as predicted by the model predicted farm tonnage relatively accurately. Predicted farm biomass was within `r round(100*min(production$min_percdiff),1)`% -- `r round(100*max(production$max_percdiff),1)`% of tonnage produced.

## Feed provision and feeding response to temperature {#sec-model-feeding}

@fig-functional-response-to-temperature shows the response of food ingested to temperature, and the food provided in response.

```{r}
#| label: fig-functional-response-to-temperature
#| fig-cap: Temperature changes in potential ingestion (solid line) and amount of food provided (dotted line), relative to maximum potential ingestion. The vertical dotted lines show the actual minimum and maximum daily temperatures experienced by farms represented in the model.

tar_load(farm_ts_data)
min_T <- min(farm_ts_data$temp_c)
max_T <- max(farm_ts_data$temp_c)

all_params <- c(
  find_read(output_species_data_path, "species_params"),
  find_read(output_species_data_path, "pop_params")
)

func_T_resp <- data.frame(water_temp = seq(-5, 26, 0.25))
weight <- 1000

# Relative feeding rate with temperature
func_T_resp$feeding_rate <- sapply(
  FUN = feeding_rate, 
  X = func_T_resp$water_temp, 
  species_params = all_params
)

# Maximum potential ingestion (g) at temperature
func_T_resp$ing_pot <- all_params['meanImax'] * (weight^all_params['m']) * func_T_resp$feeding_rate

# Food provided is based on calculated potential ingestion BUT if temperature is too low they are still provided with the food that would be required at lowest temperature (when feeding rate is ~18.3%)
func_T_resp$food_prov <- food_prov_rate(
  water_temp = func_T_resp$water_temp, 
  ing_pot = func_T_resp$ing_pot,
  ing_pot_min = all_params['meanImax'] * (weight^all_params['m']) * feeding_rate(all_params['Taa'], all_params),
  species_params = all_params,
  pop_params = all_params
)

func_T_resp$food_enc <- all_params['eff'] * func_T_resp$food_prov
func_T_resp <- func_T_resp %>% 
  mutate(ing_act = pmin(food_enc, ing_pot))

max_ing <- max(func_T_resp$ing_act)

func_T_resp %>% 
  ggplot(aes(x = water_temp, y = ing_act/max_ing)) +
  geom_line(linewidth = 0.75) +
  geom_line(aes(y = food_prov/max_ing), linewidth = 0.75, linetype = "dotted") +
  geom_vline(xintercept = min_T, linetype = "dotted") +
  geom_vline(xintercept = max_T, linetype = "dotted") +
  # scale_y_continuous(breaks = seq(0,1.5,0.25)) +
  scale_x_continuous(breaks = seq(-5,30,5), limits = c(-5,26)) +
  labs(x = expression("Water temperature ("*degree*"C)"), y = "Feedd ingested/provided") +
  prettyplot()
```

```{r}
#| label: patchwork-map-mercator
#| eval: false
#| fig-cap: |
#|   Example of a patchwork
#| fig-height: 9
#| fig-width: 9.5

p_bigmap_feeding <- p_bigmap_mercator +
  geom_sf(data = feeding, aes(color = prop_feed_eaten, geometry = geometry), size = 2) +
  scale_color_viridis_c(option = "turbo") +
  guides(col = guide_colourbar(
    title = "Proportion of provided feed eaten",
    direction = "vertical", position = "right",
    label.position = "right", title.position = "top", 
    title.vjust = 1, title.hjust = 0.5,
    frame.colour = "black", ticks.colour = "black",ticks.linewidth = 2,
    barwidth = 1.5, barheight = 20
  )) +
  prettyplot() +
  labs(y = "Latitude", x = "Longitude")

patchwork_mercator(p_bigmap_feeding)
```

## Modelled experimental feeds {#sec-feeds}

```{r}
#| label: feed-details

feed_params <- find_read(output_species_data_path, "feed_params")

feed_summary <- map_dfr(names(feed_params), function(feed) {
  df <- feed_params[[feed]]
  map_dfr(c("Proteins", "Lipids", "Carbohydrates"), function(macro) {
    contrib <- df[[macro]]$proportion * df[[macro]]$macro
    total <- sum(contrib)
    digest <- sum(df[[macro]]$digest * contrib) / total
        tibble(
      feed = feed,
      macro = macro,
      total = total,
      digest = digest
    )
  })
}) %>%
  mutate(macro = factor(macro, levels = c("Proteins", "Lipids", "Carbohydrates"), labels = c("P", "L", "C")),
         feed = as.factor(feed),
         total_r = total * 100 %>% round(1),
         digest_r = digest * 100 %>% round(1))
```

| Feed | Protein | Lipid | Carbohydrate |
|------|:----------:|:----------:|:----------:|
| Plant-dominant | `r round(100*filter(feed_summary, feed == "plant_dominant", macro == "P")$total, 1)`% (`r round(100*filter(feed_summary, feed == "plant_dominant", macro == "P")$digest, 1)`%) | `r round(100*filter(feed_summary, feed == "plant_dominant", macro == "L")$total, 1)`% (`r round(100*filter(feed_summary, feed == "plant_dominant", macro == "L")$digest, 1)`%) | `r round(100*filter(feed_summary, feed == "plant_dominant", macro == "C")$total, 1)`% (`r round(100*filter(feed_summary, feed == "plant_dominant", macro == "C")$digest, 1)`%) |
| Marine-dominant | `r round(100*filter(feed_summary, feed == "marine_dominant", macro == "P")$total, 1)`% (`r round(100*filter(feed_summary, feed == "marine_dominant", macro == "P")$digest, 1)`%) | `r round(100*filter(feed_summary, feed == "marine_dominant", macro == "L")$total, 1)`% (`r round(100*filter(feed_summary, feed == "marine_dominant", macro == "L")$digest, 1)`%) | `r round(100*filter(feed_summary, feed == "marine_dominant", macro == "C")$total, 1)`% (`r round(100*filter(feed_summary, feed == "marine_dominant", macro == "C")$digest, 1)`%) |
| Novel-inclusive | `r round(100*filter(feed_summary, feed == "novel_inclusive", macro == "P")$total, 1)`% (`r round(100*filter(feed_summary, feed == "novel_inclusive", macro == "P")$digest, 1)`%) | `r round(100*filter(feed_summary, feed == "novel_inclusive", macro == "L")$total, 1)`% (`r round(100*filter(feed_summary, feed == "novel_inclusive", macro == "L")$digest, 1)`%) | `r round(100*filter(feed_summary, feed == "novel_inclusive", macro == "C")$total, 1)`% (`r round(100*filter(feed_summary, feed == "novel_inclusive", macro == "C")$digest, 1)`%) |
: Feed macronutrient details (composition in feed, digestibility).

## Model sensitivity to parameter changes {#sec-param-sensitivity}

Parameter sensitivity was tested by varying each parameter by $\pm 10$% and calculating sensitivity as $S_p = \frac{(P_{1.1} - P_{0.9})}{0.2 \times P_1}$, where $S$ is the sensitivity of the measured variable to changes in parameter $p$, and $P_{1.1}$, $P_{0.9}$, and $P_{1}$ are the value of the measured variable when the model is run with parameter $p$ at 110%, 90%, and 100% of its value respectively. 
All parameters in Table @tbl-params were tested. The population-level parameters ($\overline{W}$, $\Delta{W}$, $\overline{I_{max}}$, $\Delta{I_{max}}$, $\overline{F}$, $\Delta{F}$) were tested with a population of of 5000 on a random 10% of farms, while all other parameters were tested across all farms with a population of 10.

```{r salmon-param-names}
#| code-summary: Get parameter and sensitivity data

params <- file.path(output_species_data_path, "sens_params.qs") %>% qs::qread()

param_names <- tibble::tribble(
  ~name,        ~lab,
  "alpha",      bquote(alpha),
  "epsprot",    bquote(epsilon["P"]),
  "epslip",     bquote(epsilon["L"]),
  "epscarb",    bquote(epsilon["C"]),
  "epsO2",      bquote(epsilon["O"[2]]),
  "pk",         bquote("pk"),
  "k0",         bquote("k"[0]),
  "m",          bquote("m"),
  "n",          bquote("n"),
  "betac",      bquote(beta*"C"),
  "Tma",        bquote("T"["max"]),
  "Toa",        bquote("T"["opt"]),
  "Taa",        bquote("T"["min"]),
  "omega",      bquote(omega),
  "a",          bquote("a"),
  "k",          bquote("k"),
  "eff",        bquote("eff"),
  "meanW",      bquote(bar("W")),
  "deltaW",     bquote(Delta*"W"), 
  "meanImax",   bquote(bar("I"["max"])),
  "deltaImax",  bquote(Delta*"I"["max"]),
  "overFmean",  bquote(bar("F")),
  "overFdelta", bquote(Delta*"F"),
  "mortmyt",    bquote("mort")
)
```

```{r}
#| label: sens-results

sens_results_files <- file.path(output_sens_data_path) %>% 
  list.files(full.names = T) %>% 
  str_subset("results")
```


# Results {#sec-results}

```{r}
#| label: input-data

ins_P <- list.files(per_biomass_cohort_path, full.names = T) %>% 
  str_subset("P_uneat|P_excr") %>% 
  purrr::map(function(nm) {qs::qread(nm)}) %>% 
  bind_rows()

ins_tot <- list.files(per_biomass_cohort_path, full.names = T) %>% 
  str_subset("total_uneat|total_excr") %>% 
  purrr::map(function(nm) {qs::qread(nm)}) %>% 
  bind_rows()
```

## Total inputs (uneaten and excreted)

### Through time

```{r}
#| label: fig-uneat-excr-plot-ts
#| fig-cap: Initial look at excreted and uneaten through time

ins_tot %>% 
  mutate(t = t-365) %>% 
  merge(farm_geometry, by.x = "farm_ID", by.y = "farm_id") %>% 
  group_by(country, feed, t, measure) %>% 
  reframe(
    sd_perbiom = sd(mean_perbiom),
    mean_perbiom = mean(mean_perbiom)
    ) %>% 
  mutate(
    mean_perbiom = mean_perbiom %>% 
      set_units("g g_fish-1") %>% 
      set_units("kg t_fish-1"),
    sd_perbiom = sd_perbiom %>% 
      set_units("g g_fish-1") %>% 
      set_units("kg t_fish-1")
  ) %>% 
  ggplot(aes(
    x = t, 
    y = drop_units(mean_perbiom), 
    ymin = drop_units(mean_perbiom-sd_perbiom), 
    ymax = drop_units(mean_perbiom+sd_perbiom), 
    colour = feed, 
    fill = feed
  )) +
  geom_line() +
  geom_ribbon(alpha = 0.25) +
  facet_grid(
    rows = vars(country),
    cols = vars(measure),
    scales = "free"
  ) +
  prettyplot() +
  scale_colour_manual(values = feed_pal) +
  scale_fill_manual(values = feed_pal) +
  scale_y_continuous(
    name = expression("Loss (kg g"^-1*")"),
    breaks = seq(0, 1, 0.2)
  )
```

```{r}
#| label: uneat-excr-plot-perc-diff

tmp <- ins_tot %>% 
  mutate(t = t-365) %>% 
  merge(farm_geometry, by.x = "farm_ID", by.y = "farm_id") %>% 
  dplyr::select(-c(mean, sd_mean, sd, biom_mean, biom_sd, biom_sd_mean, sd_perbiom)) %>% 
  group_by(country, t, measure) %>% 
  pivot_wider(
    names_from = feed, 
    values_from = mean_perbiom
  ) %>% 
  mutate(
    diff = plant_dominant - marine_dominant,
    perc_diff = diff/plant_dominant
  ) %>%
  group_by(country, t, measure) %>% 
  reframe(
    mean_diff = mean(diff),
    mean_perc_diff = mean(perc_diff),
    sd_diff = sd(diff),
    sd_perc_diff = sd(perc_diff)
  )

tmp <- tmp %>% 
  group_by(measure, country) %>% 
  reframe(
    mean_t_perc_diff = mean(mean_perc_diff),
    sd_t_perc_diff = sd(mean_perc_diff)
    )
```

While the actual difference in excreted and uneaten feed (total loss) varied between countries and through time (@fig-uneat-excr-plot-ts), relative changes between the feeds remained consistent. 
In both the US and Australia (all done so far), total excreted faeces was 
`r round(100*tmp$mean_t_perc_diff[tmp$country == "Australia" & tmp$measure == "total_excr_stat"], 1)`% ($\pm$ `r round(100*tmp$sd_t_perc_diff[tmp$country == "Australia" & tmp$measure == "total_excr_stat"], 1)`%) higher in the plant-dominant feed. 
Differences in total uneaten feed were much smaller at 
`r round(100*-tmp$mean_t_perc_diff[tmp$country == "Australia" & tmp$measure == "total_uneat_stat"], 1)`% ($\pm$ `r round(100*tmp$sd_t_perc_diff[tmp$country == "Australia" & tmp$measure == "total_uneat_stat"], 1)`%) lower in the plant-dominant feed.

### At harvest

```{r}
#| label: uneat-excr-plot-end
#| fig-cap: Caption

ins_tot %>% 
  group_by(farm_ID) %>%
  arrange(farm_ID, t) %>%
  mutate(
    cumsum_mean = cumsum(mean_perbiom) %>% 
      set_units("g g_fish-1") %>% 
      set_units("kg t_fish-1"),
    end_t = max(t)
    ) %>% 
  ungroup() %>% 
  filter(t == end_t) %>% 
  merge(farm_geometry, by.x = "farm_ID", by.y = "farm_id") %>% 
  ggplot(aes(x = country, y = cumsum_mean, fill = feed)) +
  geom_boxplot() +
  facet_grid(cols = vars(measure)) +
  prettyplot() +
  scale_fill_manual(values = feed_pal)
```

## N inputs

```{r}
#| label: N-loss-plot-total
#| fig-cap: Caption

ins_P %>% 
  group_by(farm_ID) %>%
  arrange(farm_ID, t) %>%
  mutate(
    cumsum_mean = cumsum(mean_perbiom)*6.25 %>% 
      set_units("g g_fish-1") %>% 
      set_units("kg t_fish-1"),
    end_t = max(t)
    ) %>% 
  ungroup() %>% 
  filter(t == end_t) %>% 
  merge(farm_geometry, by.x = "farm_ID", by.y = "farm_id") %>% 
  ggplot(aes(x = country, y = cumsum_mean, fill = feed)) +
  geom_boxplot() +
  facet_grid(cols = vars(measure)) +
  prettyplot() +
  scale_fill_manual(values = feed_pal)
```

# Code and packages used {#sec-code}

All analysis was conducted in R version `r R.version[['major']]`.`r R.version[['minor']]` "`r R.version[['nickname']]`" [@R_base]. 
Major packages used include `r cite_packages(packages)`.

For a full list of R packages used see the lockfile on [Github](https://www.github.com).
This manuscript was written in Quarto [@quarto] using TinyTex [@tinytex] and the acronyms extension [@acronyms]. 
