---
title: "Local to Global Mariculture Modelling"
subtitle: "Project Documentation"
author: "Dr Tormey Reimer"
date: today
execute:
  eval: true
  echo: false
  warning: false
  message: false
  cache: true
knitr: 
  opts_chunk:
    fig.align: center
    fig.width: 8.5
format:
  html:
    code-fold: true
---

# Table of Contents

All code and processes for this project are linked below. Note that some scripts require access to raw data which is not stored on Github. 
While this page (the index) has code that runs prior to rendering, all code in the subsequent pages has not been run for rendering.

## Main scripts

The main scripts for this project focus on setting up the model to examine the differences in total protein, carbohydrate, lipid and nitrogen losses between feeds. 

| Page | Description |
|---------|:-------------------------------------------------|
| **[Data Tidying](01_tidying_data.html)** | Initial data tidying and preparation |
| **[Extracting Production Locations](02_extracting_production_locations.html)** | Identification and processing of mariculture production site locations |
| **[Assessing Species Potential](03_assessing_species_potential.html)** | Evaluation of species suitability for different locations |
| **[Extracting Temperatures](04_extracting_temperatures.html)** | SST data extraction and processing for model inputs |
| **[Formulating Feeds](05_formulating_feeds.html)** | Feed composition formulation for model runs |
| **[Running Atlantic Salmon Model](06_run_atlantic_salmon_model.html)** | Atlantic salmon growth model execution |

## Extra scripts

The extra scripts for this project involved some exploration into potential impacts of nutrient losses. These will likely not make it into the final manuscript. 

| Page | Description |
|---------|:-------------------------------------------------|
| **[Species Layers](07_species_layers.html)** | Spatial analysis of species distribution layers |
| **[Relative N Inputs](08_relative_N_inputs.html)** | Analysis of nitrogen input patterns and their relative impacts |

```{r setup}
#| cache: false
#| message: false

library(magrittr)
library(units)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(ggh4x)
library(here)
library(ggpubr)
library(cowplot)
library(patchwork)
library(qs)
library(arrow)
library(targets)
library(sf)
library(terra)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
library(dtplyr)
library(furrr)
library(purrr)
library(future)
library(readxl)
library(conflicted)
library(lubridate)
library(RColorBrewer)
conflicts_prefer(dplyr::select(), dplyr::filter(), dplyr::intersect())
# This markdown uses TinyTex - install with tinytex::install_tinytex()

here("src") %>% list.files(pattern = "\\.R$", full.names = TRUE) %>% walk(source)

packages <- c("magrittr", "dplyr", "tidyr", "stringr", "ggplot2", "arrow", "targets", "sf", "terra", "rnaturalearth", "furrr", "future", "units", "lubridate", "worrms", "aquamapsdata") %>% sort()
```

```{r global-variables}
#| include: false
#| cache: false

remove_unit("g_fish")
remove_unit("kg_fish")
remove_unit("t_fish")
install_unit("g_fish")
install_unit("kg_fish", "1000 g_fish")
install_unit("t_fish", "1000 kg_fish")

species_params <- find_read(output_species_data_path, "species_params")
pop_params <- find_read(output_species_data_path, "pop_params")
  
feed_pal <- c(
  "past" = "#E41A1C", 
  "reference" = "#377EB8", 
  "future" = "#4DAF4A",
  "plant_dominant" = "#4DAF4A",
  "marine_dominant" = "#377EB8",
  "novel_inclusive" = "#E41A1C",
  "PD" = "#4DAF4A",
  "MD" = "#377EB8",
  "NI" = "#E41A1C"
)
cohort_pal <- c("1" = "#E41A1C", "2" = "#377EB8", "3" = "#4DAF4A", "all" = "black")
macro_pal <- c(
  "protein" = "darkred", 
  "P" = "darkred", 
  "carbohydrates" = "steelblue", 
  "C" = "steelblue", 
  "lipids" = "darkgoldenrod1", 
  "L" = "darkgoldenrod1"
)

prettyplot <- function() {
  theme_classic() +
    theme(
      text = element_text(family = "sans", size = 12, colour = "black"),
      legend.position = "none"
    )
}
```

# Supplemental methods {#sec-supp-methods}

```{r}
#| label: location-data

farm_locs <- find_read(output_farm_data_path, "geometry") %>% 
  rename(farm_ID = farm_id)

farm_mean_lat <- farm_locs %>%
  st_centroid() %>%
  mutate(latitude = st_coordinates(.)[, "Y"]) %>%
  st_drop_geometry() %>%
  group_by(country) %>%
  summarise(mean_latitude = mean(latitude, na.rm = TRUE)) %>% 
  arrange(-mean_latitude)

countries <- farm_mean_lat$country
countries[str_detect(countries, "United States of America")] <- "USA"
countries[str_detect(countries, "United Kingdom")] <- "UK"
countries[str_detect(countries, "Russian Federation")] <- "Russia"

farm_locs <- farm_locs %>% 
  mutate(country = factor(country, levels = farm_mean_lat$country, labels = countries))
```

## Population and biomass {#sec-population-biomass}

```{r}
#| label: raw biomass and weight data

weight_cohort <- find_read(output_model_cohort_path, "weight_stat_all_farms")
biomass_cohort <- find_read(output_model_cohort_path, "biomass_stat_all_farms")
```

Each farm's final population was calculated by dividing the production tonnage required by the average modelled individual harvest size for each farm (when feed reference feed, @fig-harvest-size). A population timeseries was then generated using the standard mortality rate (`r round(unname(pop_params['mortmyt'])*100, 3)` % d$^{-1}$). 

```{r}
#| label: fig-harvest-size
#| fig-cap: |
#|   Frequency distribution of harvest sizes used to create the population timeseries for each farm, as predicted by the fish-growth model. 

harv_size <- find_read(output_farm_data_path, "farm_harvest_size")

harv_size %>% 
  mutate(weight = weight %>% set_units("g") %>% set_units("kg")) %>% 
  select(c(farm_ID, weight)) %>% 
  ggplot(aes(x = weight)) +
  geom_histogram(binwidth = 0.25, colour = "black", fill = "salmon", alpha = 0.75) +
  scale_y_continuous(limits = c(0,500)) +
  labs(y = "Frequency", x = "Harvest weight") +
  prettyplot() +
  theme(aspect.ratio = 0.75)
```

Using this method, a farm's 'population' is not a good representation of the actual number of individuals being farmed, but it ensures each farm location is producing the correct tonnage while allowing comparisons between the different feeds. 

```{r}
#| label: fig-cohorts
#| fig-cap: | 
#|   Example of how the overlapping cohorts combine into a single farm production curve (in this case biomass). The left plot shows the farm biomass produced by each cohort from initialisation to harvest, while the right plot shows the combined farm biomass over the course of a single production period of 548 days.

farm_biomass <- find_read(output_model_farm_path, "biomass_stat") %>% 
  filter(farm_ID == 722 & feed == "plant_dominant")

cohort_biomass_split <- rbind(
  farm_biomass %>% 
    farm_to_cohort() %>% 
    mutate(cohort = 1),
  farm_biomass %>% 
    farm_to_cohort(time_offset = 365) %>% 
    mutate(cohort = 2),
  farm_biomass %>% 
    farm_to_cohort(time_offset = 730) %>% 
    mutate(cohort = 3)
) %>% 
  mutate(split = 0) %>% 
  relocate(farm_ID, .before = t) %>% 
  relocate(feed, .before = t)

cohort_biomass <- find_read(output_model_cohort_path, "biomass_stat") %>% 
  filter(farm_ID == 722 & feed == "plant_dominant") %>% 
  mutate(cohort = "all", split = 1)

rbind(
  cohort_biomass_split,
  cohort_biomass
  ) %>% 
  mutate(
    t = t-min(t)+1,
    mean = mean %>% set_units("g") %>% set_units("t"),
    sd = sd %>% set_units("g") %>% set_units("t")
  ) %>% 
  ggplot(aes(x = t, y = mean, ymin = mean-sd, ymax = mean+sd, colour = as.factor(cohort))) +
  geom_line(linewidth = 0.75) +
  geom_ribbon(linetype = "dotted", alpha = 0) +
  facet_grid(cols = vars(split)) +
  scale_x_continuous(breaks = seq(0, 1600, 120)) +
  scale_colour_manual(values = cohort_pal) +
  prettyplot() +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  labs(y = "Farm biomass", x = "Day of production")
```

```{r}
#| label: pop-biom-data

biomass_farm <- find_read(output_model_farm_path, "biomass_stat") %>% 
  group_by(farm_ID, feed) %>% 
  slice_max(t) %>% 
  ungroup()

production <- find_read(output_farm_data_path, "farm_static_data") %>% 
  merge(biomass_farm, by = "farm_ID", all.x = F) %>% 
  mutate(
    mean = set_units(mean, "g"),
    diff = set_units(mean - tonnes_per_farm, "t"),
    perc_diff = diff/tonnes_per_farm
  ) %>% 
  group_by(country, feed) %>% 
  reframe(
    min_percdiff = min(perc_diff),
    max_percdiff = max(perc_diff),
    mean_percdiff = mean(perc_diff)
  )
```

By this method, farm biomass as predicted by the model predicted farm tonnage relatively accurately. Predicted farm biomass was within `r round(100*min(production$min_percdiff),1)`% -- `r round(100*max(production$max_percdiff),1)`% of tonnage produced.

## Feed provision and feeding response to temperature {#sec-model-feeding}

@fig-functional-response-to-temperature shows the response of food ingested to temperature, and the food provided in response.

```{r}
#| label: fig-functional-response-to-temperature
#| fig-cap: Temperature changes in potential ingestion (solid line) and amount of food provided (dotted line), relative to maximum potential ingestion. The vertical dotted lines show the actual minimum and maximum daily temperatures experienced by farms represented in the model.

Sys.setenv(TAR_PROJECT = "project_farmruns")
tar_load(farm_ts_data)
min_T <- min(farm_ts_data$temp_c)
max_T <- max(farm_ts_data$temp_c)

all_params <- c(
  find_read(output_species_data_path, "species_params"),
  find_read(output_species_data_path, "pop_params")
)

func_T_resp <- data.frame(water_temp = seq(-5, 26, 0.25))
weight <- 1000

# Relative feeding rate with temperature
func_T_resp$feeding_rate <- sapply(
  FUN = feeding_rate, 
  X = func_T_resp$water_temp, 
  species_params = all_params
)

# Maximum potential ingestion (g) at temperature
func_T_resp$ing_pot <- all_params['meanImax'] * (weight^all_params['m']) * func_T_resp$feeding_rate

# Food provided is based on calculated potential ingestion BUT if temperature is too low they are still provided with the food that would be required at lowest temperature (when feeding rate is ~18.3%)
func_T_resp$food_prov <- food_prov_rate(
  water_temp = func_T_resp$water_temp, 
  ing_pot = func_T_resp$ing_pot,
  ing_pot_min = all_params['meanImax'] * (weight^all_params['m']) * feeding_rate(all_params['Taa'], all_params),
  species_params = all_params,
  pop_params = all_params
)

func_T_resp$food_enc <- all_params['eff'] * func_T_resp$food_prov
func_T_resp <- func_T_resp %>% 
  mutate(ing_act = pmin(food_enc, ing_pot))

max_ing <- max(func_T_resp$ing_act)

func_T_resp %>% 
  ggplot(aes(x = water_temp, y = ing_act/max_ing)) +
  geom_line(linewidth = 0.75) +
  geom_line(aes(y = food_prov/max_ing), linewidth = 0.75, linetype = "dotted") +
  geom_vline(xintercept = min_T, linetype = "dotted") +
  geom_vline(xintercept = max_T, linetype = "dotted") +
  # scale_y_continuous(breaks = seq(0,1.5,0.25)) +
  scale_x_continuous(breaks = seq(-5,30,5), limits = c(-5,26)) +
  labs(x = expression("Water temperature ("*degree*"C)"), y = "Feedd ingested/provided") +
  prettyplot()
```

```{r}
#| label: patchwork-map-mercator
#| eval: false
#| fig-cap: |
#|   Example of a patchwork
#| fig-height: 9
#| fig-width: 9.5

p_bigmap_feeding <- p_bigmap_mercator +
  geom_sf(data = feeding, aes(color = prop_feed_eaten, geometry = geometry), size = 2) +
  scale_color_viridis_c(option = "turbo") +
  guides(col = guide_colourbar(
    title = "Proportion of provided feed eaten",
    direction = "vertical", position = "right",
    label.position = "right", title.position = "top", 
    title.vjust = 1, title.hjust = 0.5,
    frame.colour = "black", ticks.colour = "black",ticks.linewidth = 2,
    barwidth = 1.5, barheight = 20
  )) +
  prettyplot() +
  labs(y = "Latitude", x = "Longitude")

patchwork_mercator(p_bigmap_feeding)
```

## Modelled experimental feeds {#sec-feeds}

```{r}
#| label: feed-details

feed_params <- find_read(output_species_data_path, "feed_params")

feed_summary <- map_dfr(names(feed_params), function(feed) {
  df <- feed_params[[feed]]
  map_dfr(c("Proteins", "Lipids", "Carbohydrates"), function(macro) {
    contrib <- df[[macro]]$proportion * df[[macro]]$macro
    total <- sum(contrib)
    digest <- sum(df[[macro]]$digest * contrib) / total
        tibble(
      feed = feed,
      macro = macro,
      total = total,
      digest = digest
    )
  })
}) %>%
  mutate(macro = factor(macro, levels = c("Proteins", "Lipids", "Carbohydrates"), labels = c("P", "L", "C")),
         feed = as.factor(feed),
         total_r = total * 100 %>% round(1),
         digest_r = digest * 100 %>% round(1))
```

| Feed | Protein | Lipid | Carbohydrate |
|------|:----------:|:----------:|:----------:|
| Plant-dominant | `r round(100*filter(feed_summary, feed == "plant_dominant", macro == "P")$total, 1)`% (`r round(100*filter(feed_summary, feed == "plant_dominant", macro == "P")$digest, 1)`%) | `r round(100*filter(feed_summary, feed == "plant_dominant", macro == "L")$total, 1)`% (`r round(100*filter(feed_summary, feed == "plant_dominant", macro == "L")$digest, 1)`%) | `r round(100*filter(feed_summary, feed == "plant_dominant", macro == "C")$total, 1)`% (`r round(100*filter(feed_summary, feed == "plant_dominant", macro == "C")$digest, 1)`%) |
| Marine-dominant | `r round(100*filter(feed_summary, feed == "marine_dominant", macro == "P")$total, 1)`% (`r round(100*filter(feed_summary, feed == "marine_dominant", macro == "P")$digest, 1)`%) | `r round(100*filter(feed_summary, feed == "marine_dominant", macro == "L")$total, 1)`% (`r round(100*filter(feed_summary, feed == "marine_dominant", macro == "L")$digest, 1)`%) | `r round(100*filter(feed_summary, feed == "marine_dominant", macro == "C")$total, 1)`% (`r round(100*filter(feed_summary, feed == "marine_dominant", macro == "C")$digest, 1)`%) |
| Novel-inclusive | `r round(100*filter(feed_summary, feed == "novel_inclusive", macro == "P")$total, 1)`% (`r round(100*filter(feed_summary, feed == "novel_inclusive", macro == "P")$digest, 1)`%) | `r round(100*filter(feed_summary, feed == "novel_inclusive", macro == "L")$total, 1)`% (`r round(100*filter(feed_summary, feed == "novel_inclusive", macro == "L")$digest, 1)`%) | `r round(100*filter(feed_summary, feed == "novel_inclusive", macro == "C")$total, 1)`% (`r round(100*filter(feed_summary, feed == "novel_inclusive", macro == "C")$digest, 1)`%) |
: Feed macronutrient details (composition in feed, digestibility).

## Model sensitivity to parameter changes {#sec-param-sensitivity}

Parameter sensitivity was tested by varying each parameter by $\pm 10$% and calculating sensitivity as $S_p = \frac{(P_{1.1} - P_{0.9})}{0.2 \times P_1}$, where $S$ is the sensitivity of the measured variable to changes in parameter $p$, and $P_{1.1}$, $P_{0.9}$, and $P_{1}$ are the value of the measured variable when the model is run with parameter $p$ at 110%, 90%, and 100% of its value respectively. 
The population-level parameters ($\overline{W}$, $\Delta{W}$, $\overline{I_{max}}$, $\Delta{I_{max}}$, $\overline{F}$, $\Delta{F}$) were tested with a population of of 5000 on a random 10% of farms, while all other parameters were tested across all farms with a population of 10 (@fig-sensitivity-results).

```{r}
#| label: salmon-param-names

params <- find_read(output_species_data_path, "sens_params")

param_names <- tibble::tribble(
  ~name,        ~lab,
  "alpha",      bquote(alpha),
  "epsprot",    bquote(epsilon["P"]),
  "epslip",     bquote(epsilon["L"]),
  "epscarb",    bquote(epsilon["C"]),
  "epsO2",      bquote(epsilon["O"[2]]),
  "pk",         bquote("pk"),
  "k0",         bquote("k"[0]),
  "m",          bquote("m"),
  "n",          bquote("n"),
  "betac",      bquote(beta*"C"),
  "Tma",        bquote("T"["max"]),
  "Toa",        bquote("T"["opt"]),
  "Taa",        bquote("T"["min"]),
  "omega",      bquote(omega),
  "a",          bquote("a"),
  "k",          bquote("k"),
  "eff",        bquote("eff"),
  "meanW",      bquote(bar("W")),
  "deltaW",     bquote(Delta*"W"), 
  "meanImax",   bquote(bar("I"["max"])),
  "deltaImax",  bquote(Delta*"I"["max"]),
  "overFmean",  bquote(bar("F")),
  "overFdelta", bquote(Delta*"F"),
  "mortmyt",    bquote("mort")
)
```

```{r}
#| label: fig-sensitivity-results
#| fig-cap: Sensitivity of individual fish weight (blue) and total farm excretion (red) to a 10% increase in each model parameter. Bars show mean values, error bars show standard deviation between farms. 
#| fig-width: 8

sens_results <- find_read(output_sens_data_path, "sens_results") %>% 
  filter(measure %in% c("total_excr", "weight") & adj_param != "nruns") %>% 
  mutate(measure = droplevels(measure))

sens_results %>% 
  ggplot(aes(x = adj_param, y = mean_sens, ymin = mean_sens-sd_sens, ymax = mean_sens+sd_sens, fill = measure)) +
  geom_col(position = position_dodge(), width = 0.95, alpha = 0.65, colour = "black") +
  geom_errorbar(position = position_dodge(width = 0.95), width = 0.5) +
  coord_flip() +
  prettyplot() +
  scale_x_discrete(breaks = param_names$name, labels = param_names$lab) +
  scale_y_continuous(breaks = seq(-10, 30, 5)) +
  scale_fill_brewer(palette = "Set1") +
  labs(y = "Sensitivity", x = "Adjusted parameter")
```

# Results {#sec-results}

## Biomass produced and feed provided

```{r}
#| label: fig-biom-prod-comparison
#| fig-caption: Percentage difference in the biomass produced by farms fed the marine-dominant feed (blue) or the novel-inclusive feed (red), in comparison to the plant-dominant feed.
#| class-chunk: aside

biomass_produced <- find_read(output_model_farm_path, "biomass_produced_all_farms") %>% 
  merge(st_drop_geometry(farm_locs), by = "farm_ID")

biomass_produced <- biomass_produced %>% 
  select(-sd, -prod_t) %>% 
  mutate(feed = factor(feed, labels = c("MD", "PD", "NI"))) %>% 
  pivot_wider(names_from = feed, values_from = mean) %>% 
  mutate(MD = (MD-PD)/PD,
         NI = (NI-PD)/PD) %>% 
  select(-PD) %>% 
  pivot_longer(
    cols = c(MD, NI), 
    names_to = "feed", 
    names_transform = list(feed = as.factor),
    values_to = "perc_diff"
  ) 

bps <- biomass_produced %>% 
  group_by(feed) %>% 
  reframe(
    diff = mean(perc_diff),
    sd = sd(perc_diff),
    ) %>% 
  mutate(
    sign = case_when(diff < 0 ~ "less", T ~ "more"),
    diff = round(100*diff, 2),
    sd = round(100*sd, 2),
    abs_diff = abs(diff)
  )

biomass_produced %>% 
  ggplot(aes(x = country, y = 100*perc_diff, fill = feed)) +
  geom_boxplot() +
  scale_fill_manual(values = feed_pal) +
  prettyplot() +
  labs(x = "Country", y = "% difference")
```

Overall, when farms were fed the marine-dominant feed they produced `r bps$abs_diff[bps$feed == "MD"]`% `r bps$sign[bps$feed == "MD"]` ($\pm$ `r bps$sd[bps$feed == "MD"]`%) biomass with the same population, and when farms were fed the novel-inclusive feed they produced `r bps$abs_diff[bps$feed == "NI"]`% `r bps$sign[bps$feed == "NI"]` ($\pm$ `r bps$sd[bps$feed == "NI"]`%) biomass than when fed the plant-dominant feed (@fig-biom-prod-comparison). 

```{r}
#| label: feed-prov-comparison

feed_provided <- sum_prod(output_model_farm_path, "food_prov") %>% 
  merge(st_drop_geometry(farm_locs), by = "farm_ID")

feed_provided <- feed_provided %>% 
  select(-sd, -total_d) %>% 
  mutate(feed = factor(feed, labels = c("MD", "PD", "NI"))) %>% 
  pivot_wider(names_from = feed, values_from = total) %>% 
  mutate(MD = (MD-PD)/PD,
         NI = (NI-PD)/PD) %>% 
  select(-PD) %>% 
  pivot_longer(
    cols = c(MD, NI), 
    names_to = "feed", 
    names_transform = list(feed = as.factor),
    values_to = "perc_diff"
  ) %>% 
  mutate(perc_diff = perc_diff %>% drop_units())

fps <- feed_provided %>% 
  group_by(feed) %>% 
  reframe(
    diff = mean(perc_diff),
    sd = sd(perc_diff),
    ) %>% 
  mutate(
    sign = case_when(diff < 0 ~ "less", T ~ "more"),
    diff = round(100*diff, 2),
    sd = round(100*sd, 2),
    abs_diff = abs(diff)
  )
```

Farms were therefore provided `r fps$abs_diff[fps$feed == "MD"]`% `r fps$sign[fps$feed == "MD"]` ($\pm$ `r fps$sd[fps$feed == "MD"]`%) feed when fed the marine-dominant feed, and `r fps$abs_diff[fps$feed == "NI"]`% `r fps$sign[fps$feed == "NI"]` ($\pm$ `r fps$sd[fps$feed == "NI"]`%) feed when fed the novel-inclusive feed compared to the plant-dominant feed (@fig-feedprov-comparison). 

```{r}
#| label: fig-feedprov-comparison
#| fig-cap: Percentage difference in the total feed provided when farms were fed the marine-dominant feed (blue) or the novel-inclusive feed (red), in comparison to the plant-dominant feed.
#| class-chunk: aside

feed_provided %>% 
  ggplot(aes(x = country, y = 100*perc_diff, fill = feed)) +
  geom_boxplot() +
  prettyplot() +
  scale_fill_manual(values = feed_pal) +
  labs(x = "Country", y = "Mean feed provided (kg/kg salmon)")
```

```{r}
#| label: feed-uneat-comparison

uneaten_feed <- sum_prod(output_model_farm_path, "total_uneat") %>% 
  merge(st_drop_geometry(farm_locs), by = "farm_ID")

uneaten_feed <- uneaten_feed %>% 
  select(-sd, -total_d) %>% 
  mutate(feed = factor(feed, labels = c("MD", "PD", "NI"))) %>% 
  pivot_wider(names_from = feed, values_from = total) %>% 
  mutate(MD = (MD-PD)/PD,
         NI = (NI-PD)/PD) %>% 
  select(-PD) %>% 
  pivot_longer(
    cols = c(MD, NI), 
    names_to = "feed", 
    names_transform = list(feed = as.factor),
    values_to = "perc_diff"
  ) %>% 
  mutate(perc_diff = perc_diff %>% drop_units())

ufs <- uneaten_feed %>% 
  group_by(feed) %>% 
  reframe(
    diff = mean(perc_diff),
    sd = sd(perc_diff),
    ) %>% 
  mutate(
    sign = case_when(diff < 0 ~ "less", T ~ "more"),
    diff = round(100*diff, 3),
    sd = round(100*sd, 2),
    abs_diff = abs(diff)
  )
```

Consequently, farms lost `r ufs$abs_diff[ufs$feed == "MD"]`% `r ufs$sign[ufs$feed == "MD"]` ($\pm$ `r ufs$sd[ufs$feed == "MD"]`%) uneaten feed when fed the marine-dominant feed and `r ufs$abs_diff[ufs$feed == "NI"]`% `r ufs$sign[ufs$feed == "NI"]` ($\pm$ `r ufs$sd[ufs$feed == "NI"]`%) uneaten feed when fed the novel-inclusive feed compared to the plant-dominant feed. 

### Summary

| Feed | Change in biomass produced | Change in feed provided | Change in uneaten feed lost |
|----------|-----|-----|-----|
| Marine-dominant | `r bps$diff[bps$feed == "MD"]` | `r fps$diff[fps$feed == "MD"]` | `r ufs$diff[ufs$feed == "MD"]` |
| Novel-inclusive | `r bps$diff[bps$feed == "NI"]` | `r fps$diff[fps$feed == "NI"]` | `r ufs$diff[ufs$feed == "NI"]` |

# Inputs

## Total inputs (mass)

```{r}
#| label: total-inputs

# Total inputs, all times
total_uneaten <- find_read(output_model_cohort_path, "total_uneat")
total_excreted <- find_read(output_model_cohort_path, "total_excr")

total_inputs <- rbind(total_uneaten, total_excreted) %>% 
  merge(st_drop_geometry(farm_locs), by = "farm_ID") %>% 
  select(-c(sd)) %>% 
  pivot_wider(names_from = measure, values_from = mean, id_cols = c(farm_ID, feed, country, prod_t)) %>% 
  mutate(perc_excr = total_excr_stat/(total_excr_stat+total_uneat_stat)) %>% 
  select(-c(total_excr_stat, total_uneat_stat))

# Total inputs, summed across production period
total_uneaten_sum <- sum_prod(output_model_farm_path, "total_uneat")
total_excreted_sum <- sum_prod(output_model_farm_path, "total_excr")

total_inputs_sum <- rbind(total_uneaten_sum, total_excreted_sum) %>% 
  merge(st_drop_geometry(farm_locs), by = "farm_ID") %>% 
  select(-c(sd)) %>% 
  pivot_wider(names_from = measure, values_from = total, id_cols = c(farm_ID, feed, country)) %>% 
  mutate(perc_excr = total_excr_stat/(total_excr_stat+total_uneat_stat)) %>% 
  select(-c(total_excr_stat, total_uneat_stat))

tis <- total_inputs_sum %>% 
  mutate(
    perc_excr = drop_units(perc_excr),
    feed = factor(
      feed, 
      levels = c("marine_dominant", "novel_inclusive", "plant_dominant"), 
      labels = c("MD", "NI", "PD")
    )
  )
```

Total farm inputs (excreted matter and uneaten feed) were on average composed of
`r round(100*mean(tis$perc_excr[tis$feed == "PD"]), 1)`% ($\pm$ `r round(100*sd(tis$perc_excr[tis$feed == "PD"]), 2)`%) excreted matter (`r 100-round(100*mean(tis$perc_excr[tis$feed == "PD"]), 1)`% uneaten feed) when farms were fed the plant-dominant feed, 
`r round(100*mean(tis$perc_excr[tis$feed == "MD"]), 1)`% ($\pm$ `r round(100*sd(tis$perc_excr[tis$feed == "MD"]), 2)`%) excreted matter (`r 100-round(100*mean(tis$perc_excr[tis$feed == "MD"]), 1)`% uneaten feed) when farms were fed the marine-dominant feed, 
`r round(100*mean(tis$perc_excr[tis$feed == "NI"]), 1)`% ($\pm$ `r round(100*sd(tis$perc_excr[tis$feed == "NI"]), 2)`%) excreted matter (`r 100-round(100*mean(tis$perc_excr[tis$feed == "MD"]), 1)`% uneaten feed) when farms were fed the novel-inclusive feed.

```{r}
#| label: input-glimpse
#| eval: false

total_inputs_sum %>% 
  ggplot(aes(x = country, y = perc_excr, fill = feed)) +
  geom_boxplot() 

total_inputs_sum %>% 
  filter(country == "Canada") %>% 
  ggplot(aes(x = perc_excr)) +
  geom_histogram()
```

```{r}
#| label: fig-total-inputs-through-time
#| class-chunk: aside

total_inputs_tt <- rbind(total_uneaten, total_excreted) %>% 
  merge(st_drop_geometry(farm_locs), by = "farm_ID") %>% 
  mutate(measure = droplevels(measure),
         feed = factor(
           feed,
           levels = c("marine_dominant", "novel_inclusive", "plant_dominant"),
           labels = c("MD", "NI", "PD")
         )) %>%
  group_by(country, feed, prod_t, measure) %>% 
  reframe(
    # sd = sqrt(sumna(sd^2)),
    mean = meanna(mean)
  ) %>% 
  pivot_wider(names_from = feed, values_from = mean) %>% 
  mutate(MD = (MD-PD)/PD,
         NI = (NI-PD)/PD) %>% 
  select(-PD) %>% 
  pivot_longer(cols = c(MD, NI), names_to = "feed", values_to = "perc_diff", names_transform = list(feed = as.factor))

# Shows that % change in uneaten/excreted feed between feeds is very consistent through time
total_inputs_tt %>%
  ggplot(aes(x = prod_t, y = perc_diff, colour = country, linetype = feed)) +
  geom_line(linewidth = 0.75) +
  facet_wrap(vars(measure)) +
  prettyplot() +
  theme(legend.position = "bottom")
```

The difference between feeds in the uneaten feed and excreted matter lost remained relatively consistent through time for each farm (@fig-total-inputs-through-time). 

```{r}
#| label: total-inputs-map-data

total_inputs_sum <- rbind(total_uneaten_sum, total_excreted_sum) %>% 
  select(-c(sd)) %>% 
  mutate(
    feed = factor(feed, levels = c("marine_dominant", "novel_inclusive", "plant_dominant"), labels = c("MD", "NI", "PD"))
    ) %>% 
  pivot_wider(
    names_from = feed,
    values_from = total,
    id_cols = c(farm_ID, measure)
  ) %>% 
  mutate(
    MD = (MD-PD)/PD,
    NI = (NI-PD)/PD
  ) %>% 
  select(-PD) %>% 
  pivot_longer(
    cols = c(MD, NI),
    names_to = "feed", names_transform = list(feed = as.factor),
    values_to = "perc_diff", values_transform = list(perc_diff = drop_units)
  ) %>% 
  merge(farm_locs, by = "farm_ID") %>% 
  st_as_sf()
```

Differences spatially:

* It looks like the marine-dominant feed overall results in less inputs (higher digestibility)
* It is interesting that the changes due to switching to the marine-dominant feed seem so random spatially
* However the changes in the novel-inclusive feed are less variable, probably because the novel-inclusive feed is very similar to the plant-dominant feed.

```{r}
#| label: fig-total-inputs-big-map
#| fig-width: 8.5
#| fig-height: 10
#| fig-cap: Percentage difference in total inputs when farms are fed the marine-dominant feed (top) or the novel-inclusive feed (bottom).

p_bigmap_robinson +
  geom_sf(
    data = total_inputs_sum, 
    aes(colour = 100*perc_diff, geometry = geometry), 
    size = 2
  ) +
  coord_sf() +
  scale_color_viridis_c(option = "turbo", limits = c(-30, 10)) +
  guides(col = guide_colourbar(
    title = expression("% Change in total inputs (from PD feed)"),
    direction = "horizontal", position = "bottom",
    label.position = "bottom", title.position = "top", 
    title.vjust = 1, title.hjust = 0.5,
    frame.colour = "black", ticks.colour = "black",ticks.linewidth = 1.5,
    barheight = 1.5, barwidth = 20,
  )) +
  facet_grid(rows = vars(feed)) +
  prettyplot() +
  theme(strip.background = element_blank(), strip.text = element_blank(),
        axis.title = element_blank(),
        legend.position = "bottom")
```

```{r}
#| label: total-inputs-patchwork-map
#| cache: false

p_mercator <- p_bigmap_mercator + 
  geom_sf(
    data = total_inputs_sum,
    # data = filter(total_inputs_sum, feed == "MD"), 
    aes(colour = 100*perc_diff, geometry = geometry), 
    size = 2
  ) +
  coord_sf() +
  scale_color_viridis_c(option = "turbo", limits = c(-30, 10)) +
  facet_grid(cols = vars(feed)) +
  prettyplot() +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  labs(y = "Latitude", x = "Longitude")

ins <- get_insets_mercator(p_mercator)
```

```{r}
#| label: fig-total-inputs-patchwork-map-CAN1
#| fig-cap: Change in total inputs (west Canada)
#| cache: false

ins[[1]]
```

```{r}
#| label: fig-total-inputs-patchwork-map-CAN2
#| fig-cap: Change in total inputs (east Canada)
#| cache: false

ins[[2]]
```

```{r}
#| label: fig-total-inputs-patchwork-map-EUR
#| fig-cap: Change in total inputs (Europe)
#| cache: false

ins[[3]]
```

```{r}
#| label: fig-total-inputs-patchwork-map-CHI
#| fig-cap: Change in total inputs (Chile)
#| cache: false

ins[[4]]
```

```{r}
#| label: fig-total-inputs-patchwork-map-AUS
#| fig-cap: Change in total inputs (Australia)
#| cache: false

ins[[5]]
```

# N inputs

```{r}
#| label: N-inputs-map-data

N_uneaten_sum <- sum_prod(output_model_farm_path, "P_uneat") %>% 
  mutate(total = total * 6.25)
N_excreted_sum <- sum_prod(output_model_farm_path, "P_excr") %>% 
  mutate(total = total * 6.25)

N_inputs_sum <- rbind(N_uneaten_sum, N_excreted_sum) %>% 
  select(-c(sd, total_d)) %>% 
  mutate(
    feed = factor(feed, 
                  levels = c("marine_dominant", "novel_inclusive", "plant_dominant"), 
                  labels = c("MD", "NI", "PD"))
    ) %>% 
  pivot_wider(
    names_from = feed,
    values_from = total,
    id_cols = c(farm_ID, measure)
  ) %>% 
  mutate(
    MD = (MD-PD)/PD,
    NI = (NI-PD)/PD
  ) %>% 
  select(-PD) %>% 
  pivot_longer(
    cols = c(MD, NI),
    names_to = "feed", names_transform = list(feed = as.factor),
    values_to = "perc_diff", values_transform = list(perc_diff = drop_units)
  ) %>% 
  merge(farm_locs, by = "farm_ID") %>% 
  st_as_sf()
```

```{r}
#| label: fig-N-inputs-boxplot

N_inputs_sum_raw_0 <- rbind(N_uneaten_sum, N_excreted_sum) %>% 
  select(-c(sd)) %>% 
  mutate(
    total_d = (total_d * 6.25) %>% set_units("kg d-1"),
    feed = factor(feed, 
                  levels = c("marine_dominant", "plant_dominant", "novel_inclusive"), 
                  labels = c("MD", "PD", "NI"))
    ) %>% 
  merge(farm_locs, by = "farm_ID") %>% 
  group_by(country, feed, measure) %>% 
  reframe(mean = mean(total_d)) 

N_inputs_sum_raw_1 <- N_inputs_sum_raw_0 %>% 
  group_by(country, feed) %>% 
  reframe(mean = sum(mean))

N_inputs_sum_raw_0 <- N_inputs_sum_raw_0 %>% 
  filter(measure == "P_excr_stat")

ggplot(N_inputs_sum_raw_0, aes(x = country, y = mean, fill = feed)) +
  geom_col(position = position_dodge(), width = 0.95, colour = "black", alpha = 0.75) +
  geom_col(
    data = N_inputs_sum_raw_1,
    position = position_dodge(), width = 0.95, colour = "black", alpha = 0.25
  ) +
  prettyplot() +
  scale_fill_manual(values = feed_pal) +
  labs(x = "Country", y = "N inputs")
```

```{r}
#| label: fig-N-inputs-big-map
#| fig-width: 8.5
#| fig-height: 10
#| fig-cap: Percentage difference in N inputs when farms are fed the marine-dominant feed (top) or the novel-inclusive feed (bottom).

p_bigmap_robinson +
  geom_sf(data = total_inputs_sum, aes(colour = 100*perc_diff, geometry = geometry), size = 2) +
  coord_sf() +
  scale_color_viridis_c(option = "turbo", limits = c(-30, 10)) +
  guides(col = guide_colourbar(
    title = expression("% Change in N inputs (from PD feed)"),
    direction = "horizontal", position = "bottom",
    label.position = "bottom", title.position = "top", 
    title.vjust = 1, title.hjust = 0.5,
    frame.colour = "black", ticks.colour = "black",ticks.linewidth = 1.5,
    barheight = 1.5, barwidth = 20,
  )) +
  facet_grid(rows = vars(feed)) +
  prettyplot() +
  theme(strip.background = element_blank(), strip.text = element_blank(),
        axis.title = element_blank(),
        legend.position = "bottom")
```

```{r}
#| label: N-inputs-patchwork-map
#| cache: false

p_mercator <- p_bigmap_mercator + 
  geom_sf(data = N_inputs_sum, aes(colour = 100*perc_diff, geometry = geometry), size = 2) +
  coord_sf() +
  scale_color_viridis_c(option = "turbo", limits = c(-30, 10)) +
  facet_grid(cols = vars(feed)) +
  prettyplot() +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  labs(y = "Latitude", x = "Longitude")

ins <- get_insets_mercator(p_mercator)
```

```{r}
#| label: fig-N-inputs-patchwork-map-CAN1
#| fig-cap: Change in N inputs (west Canada)
#| cache: false

ins[[1]]
```

```{r}
#| label: fig-N-inputs-patchwork-map-CAN2
#| fig-cap: Change in N inputs (east Canada)
#| cache: false

ins[[2]]
```

```{r}
#| label: fig-N-inputs-patchwork-map-EUR
#| fig-cap: Change in N inputs (Europe)
#| cache: false

ins[[3]]
```

```{r}
#| label: fig-N-inputs-patchwork-map-CHI
#| fig-cap: Change in N inputs (Chile)
#| cache: false

ins[[4]]
```

```{r}
#| label: fig-N-inputs-patchwork-map-AUS
#| fig-cap: Change in N inputs (Australia)
#| cache: false

ins[[5]]
```


# Code and packages used {#sec-code}

All analysis was conducted in R version `r R.version[['major']]`.`r R.version[['minor']]` "`r R.version[['nickname']]`" [@R_base]. 
Major packages used include `r cite_packages(packages)`.

For a full list of R packages used see the lockfile on [Github](https://www.github.com).
This manuscript was written in Quarto [@quarto] using TinyTex [@tinytex] and the acronyms extension [@acronyms]. 
