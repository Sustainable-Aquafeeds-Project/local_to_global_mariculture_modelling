---
title: "Model inner workings - for methods and supplementary sections"
author: Tormey Reimer
date: last-modified

bibliography: ["C:/Users/treimer/Documents/R-temp-files/local_to_global_mariculture_modelling/resources/refs.bib", "C:/Users/treimer/Documents/R-temp-files/local_to_global_mariculture_modelling/resources/manual-refs.bib"]

format: 
  html:
    theme: simplex
    css: ["C:/Users/treimer/Documents/R-temp-files/local_to_global_mariculture_modelling/resources/extra.css"]
    code-fold: true
    code-overflow: wrap
    toc: true
    toc-expand: true
    toc-location: left
    lang: en-GB
    grid:
      sidebar-width: 350px
      body-width: 1200px
      margin-width: 250px
      gutter-width: 2em
  # pdf:
  #   papersize: a4
  #   linestretch: 1.15
  #   link-citations: true
  #   keep-tex: true
  #   template-partials:
  #     - "C:/Users/treimer/Documents/R-temp-files/local_to_global_mariculture_modelling/resources/title.tex"
  #   include-in-header:
  #     file: "C:/Users/treimer/Documents/R-temp-files/local_to_global_mariculture_modelling/resources/header_extra.tex"

filters:
  - acronyms
  
execute:
  eval: true
  echo: false
  warning: false
  message: false
  cache: true
  
knitr: 
  opts_chunk:
    fig.align: center

editor: source
---

# Introduction

```{r setup}
#| include: false
#| cache: false
#| eval: true

packs <- unique(c('magrittr', 'dplyr', 'tidyr', 'stringr', 'ggplot2', 'here', 'ggpubr', 'patchwork', 'qs', 'arrow', 'targets', 'sf', 'terra', 'rnaturalearth', 'rnaturalearthdata', 'dtplyr', 'furrr', 'RColorBrewer', 'conflicted'))
pacman::p_load(char = packs)

conflicts_prefer(dplyr::select(), dplyr::filter(), .quiet = T)

source(here("src/spatial_templates.R"))
source(here("src/model_functions.R"))

# Sys.setenv(TAR_PROJECT = "project_main")
base_path <- file.path("C:", "Users", "treimer", "Documents", "R-temp-files", "local_to_global_mariculture_modelling")
targets_store <- file.path(base_path, "targets", "_targets_individual")
farm_IDs <- tar_read(farm_IDs, store = targets_store)
b1 <- sample(length(farm_IDs), 25, replace = F)
b2 <- b1 + length(farm_IDs)
b3 <- b2 + length(farm_IDs)
```

# Temporary questions to answer:

-   Do the fish reach harvest size within a reasonable amount of time?
    -   If not, are they growing for the correct amount of time, starting at the correct weight?
-   Is their FCE/FCR reasonably close to experimental data?
-   Is their SGR reasonably close to experimental data?

# Model approach

We adapted the methods of @baldan_r_2018 to create a bioenergetic model that simulates individual growth and farm-scale production for Atlantic salmon and the resultant nutrient waste in the form of excess labile nitrogen and phosphorus. 
The model simulates growth at an individual level, calculating the change in individual weight through time using:

$$
\frac{dw}{dt} = \frac{A-C}{\epsilon}
$$

Where $w=$ is wet weight (t), $t=$ time (d), $A=$ anabolic rate (J t$^{-1}$), $C=$ the catabolic rate (J t$^{-1}$), $\epsilon=$ energy density of body tissues (J t$^{-1}$). 

Individual models were then upscaled using monte-carlo simulations to simulate size structure in a population. Size differences were achieved through different initial starting weights and ingestion rates for different finfish species. All individuals have a fixed mortality rate to simulate stocking and harvesting. 

* Parameterised for atlantic salmon
* Farms with mean temperature < 8.5$^\circ$ were excluded

# Water temp

```{r water-temp-data}
#| eval: true
#| code-summary: Load and cache data to avoid spending a long time on it every render.

# This is the full idealised year (2 years?) of temperature data
sst <- file.path(base_path, "data", "_general_data", "SST", "farm_SST_extracted.parquet") %>% read_parquet()

# This is the actual temperature curve for the farming period
farm_temp <- tar_read(exind_water_temp, store = targets_store, branches = b1)
```

Originally, all salmon were transferred to grow-out cages (model began) on January 1st. This isn't particularly realistic. Now, all farms begin the modelling period in spring (1st of May in the northern hemisphere, 1st of October in the southern hemisphere).

```{r fig-water-temp}
#| eval: true
#| fig-cap: Water temperature for the production period, starting at either DOY 121 (1st May, northern hemisphere) or DOY 274 (1st October, southern hemisphere).

farm_temp %>% 
  ggplot(aes(x = prod_days, y = water_temp, colour = as.factor(farm_ID))) +
  geom_line(linewidth = 0.75) +
  theme_classic() +
  theme(legend.position = "none") +
  scale_x_continuous(breaks = seq(0, 550, 50)) +
  labs(x = "Day of production cycle", y = expression("Water temperature ("*degree*"C)"))
```

# Weight

```{r weight-related-data}
#| eval: true
#| code-summary: Load and cache data to avoid spending a long time on it every render.

species_params <- tar_read(species_params, store = targets_store)
pop_params <- tar_read(pop_params, store = targets_store)
weight <- tar_read(exind_weight, store = targets_store, branches = b1)
TGC <- tar_read(exind_TGC, store = targets_store) %>% unname()
SGR <- tar_read(exind_SGR, store = targets_store, branches = b1)
FCR <- tar_read(exind_FCR, store = targets_store, branches = b1)

weight_smolt <- weight %>% 
  filter(prod_days == 152) %>% 
  group_by(farm_ID, feed) %>% 
  reframe(final_weight = max(weight))
weight_ocean <- weight %>% 
  filter(prod_days == 547) %>% 
  group_by(farm_ID, feed) %>% 
  reframe(final_weight = max(weight))
```

@fig-ref-weight shows the change in weight for 25 individuals grown at different farms. Within the first 5 months (post-smolt period) the fish grow from 125g to `r round(mean(weight_smolt$final_weight), 1)`g, or approximately `r round(round(mean(weight_smolt$final_weight), 1)/125, 1)`$\times$ their starting weight. This is better than most production cycles. By the end of the production cycle (547 days, 18 months) the fish have grown to a mean of `r round(mean(weight_ocean$final_weight), 1)` g, and a max of `r round(max(weight_ocean$final_weight), 1)` g. This is not quite what's needed - I'm expecting individual weights to at least approximate the mean commercial weight of 5kg.

```{r fig-ref-weight}
#| eval: true
#| fig-cap: Weight of single individuals grown at 25 random farms across the production period, starting at either DOY 121 (1st May, northern hemisphere) or DOY 274 (1st October, southern hemisphere).

weight %>% 
  ggplot(aes(x = prod_days, y = weight, colour = as.factor(farm_ID))) +
  geom_line(linewidth = 0.75) +
  scale_y_continuous(breaks = seq(0, 5000, 500)) +
  theme_classic() +
  theme(legend.position = "none") +
  scale_x_continuous(breaks = seq(0, 550, 50)) +
  labs(x = "Day of production cycle", y = "Individual weight (g)")
```

```{r fig-ref-TGC}
#| eval: true
#| fig-cap: Thermal-unit Growth Coefficient (TGC) of all 2721 farms across the production period, starting at either DOY 121 (1st May, northern hemisphere) or DOY 274 (1st October, southern hemisphere).

data.frame(TGC = TGC) %>% 
  ggplot(aes(x = TGC)) +
  geom_histogram(fill = NA, colour = "black") +
  theme_classic() +
  labs(x = "TGC", y = "Count of farms")
```

```{r fig-ref-SGR}
#| eval: true
#| fig-cap: Specific growth rate of single individuals grown at 25 random farms across the production period, starting at either DOY 121 (1st May, northern hemisphere) or DOY 274 (1st October, southern hemisphere).

SGR %>% 
  ggplot(aes(x = prod_days, y = SGR, colour = as.factor(farm_ID))) +
  geom_line(linewidth = 0.75) +
  scale_y_continuous(breaks = seq(0, 2.5, 0.25)) +
  theme_classic() +
  theme(legend.position = "none") +
  scale_x_continuous(breaks = seq(0, 550, 50)) +
  labs(x = "Day of production cycle", y = expression("SGR"))
```

```{r fig-ref-FCR}
#| eval: false
#| fig-cap: FCR of 25 random farms across the production period, starting at either DOY 121 (1st May) or DOY 274 (1st October).

FCR %>% 
  ggplot(aes(x = prod_days, y = FCR, colour = as.factor(farm_ID))) +
  geom_line(linewidth = 0.75) +
  theme_classic() +
  theme(legend.position = "none") +
  scale_x_continuous(breaks = seq(0, 550, 50)) +
  labs(x = "Day of production cycle", y = expression("FCR"))
```

```{r fig-water-temperature}
#| eval: false

sst_means <- sst %>% 
  group_by(farm_id) %>% 
  reframe(sst = mean(temp_c, na.rm = T))
```

# General fish functions

@fig-functional-response-to-temperature shows the metabolic response of all salmon to temperature (affecting their relative metabolism), and @fig-feeding-rate-with-temperature shows how the salmons' feeding rate changes with temperature.

```{r fig-functional-response-to-temperature}
#| fig-cap: Metabolic response of all salmon to temperature within the model.

df <- data.frame(water_temp = seq(-5, 30, 0.25))
df$resp <- exp(species_params['pk']*df$water_temp)

df %>% 
  ggplot(aes(x = water_temp, y = resp)) +
  geom_line(linewidth = 0.75) +
  scale_y_continuous(breaks = seq(0,5,0.5)) +
  scale_x_continuous(breaks = seq(-10,35,5)) +
  labs(x = expression("Water temperature ("*degree*"C)"), y = "Temperature response") +
  theme_classic() +
  theme(text = element_text(colour = "black", family = "serif", size = 12))
```

$$
cat = \epsilon_{O_2} \times k_0 \times T_{resp} \times W^n \times \omega
$$

Relative feeding rate is temperature-dependent and calculated via:

$$
FR_{rel} = e^{b(T_w-T_{opt})} \times \bigg[\frac{T_{max}-T_w}{T_{max}-T_{opt}}\bigg]^{b(T_{max}-T_{opt})}
$$

where $T_{opt}$ is the optimum feeding temperature, $T_{max}$ is the maximum feeding temperature, $T_w$ is the current water temperature, and $b$ is a species-specific shape coefficient. 

```{r fig-feeding-rate-with-temperature}
#| fig-cap: Changes in salmons feeding rate with temperature. The dashed line shows the optimum feeding temperature for salmon while the dotted lines show the minimum and maximum feeding temperatures.

df <- data.frame(water_temp = seq(-5, 30, 0.25))
df$feeding <- sapply(FUN = feeding_rate, X = df$water_temp, species_params = species_params)

df %>% 
  ggplot(aes(x = water_temp, y = feeding)) +
  geom_line(linewidth = 0.75) +
  geom_vline(aes(xintercept = species_params["Toa"]), linetype = "dashed") +
  geom_vline(aes(xintercept = species_params["Taa"]), linetype = "dotted") +
  geom_vline(aes(xintercept = species_params["Tma"]), linetype = "dotted") +
  scale_y_continuous(breaks = seq(0,1,0.1)) +
  labs(x = expression("Water temperature ("*degree*"C)"), y = "Relative feeding rate") +
  theme_classic() +
  theme(text = element_text(colour = "black", family = "serif", size = 12))
```

# Feed data

```{r feed-raw-data}
#| cache: false
#| eval: true
#| code-summary: Load and cache data to avoid spending a long time on it every render.

feed_params_protein <- tar_read(feed_params_protein, store = targets_store)
feed_params_carbs <- tar_read(feed_params_carbs, store = targets_store)
feed_params_lipids <- tar_read(feed_params_lipids, store = targets_store)
```

Incorporated the individual digestibility of each ingredient and switched to tracking ingredients separately instead of feed – this unfortunately makes the model run slower but I think it will be worth it once the digestibility coefficients from the experiments are incorporated.

```{r feed-data}
#| eval: true

ref_feed <- list(
    feed_params_protein[[1]] %>% 
      mutate(feed = "reference", type = "protein") %>% group_by(feed, type) %>% 
      reframe(proportion = sum(proportion),
              macro = sum(macro),
              digest = sum(digest)),
  feed_params_carbs[[1]] %>% 
      mutate(feed = "reference", type = "carb") %>% group_by(feed, type) %>% 
      reframe(proportion = sum(proportion),
              macro = sum(macro),
              digest = sum(digest)),
  feed_params_lipids[[1]] %>% 
      mutate(feed = "reference", type = "lipid") %>% group_by(feed, type) %>% 
      reframe(proportion = sum(proportion),
              macro = sum(macro),
              digest = sum(digest))
) %>% bind_rows()
past_feed <- list(
    feed_params_protein[[2]] %>% 
      mutate(feed = "past", type = "protein") %>% group_by(feed, type) %>% 
      reframe(proportion = sum(proportion),
              macro = sum(macro),
              digest = sum(digest)),
  feed_params_carbs[[2]] %>% 
      mutate(feed = "past", type = "carb") %>% group_by(feed, type) %>% 
      reframe(proportion = sum(proportion),
              macro = sum(macro),
              digest = sum(digest)),
  feed_params_lipids[[2]] %>% 
      mutate(feed = "past", type = "lipid") %>% group_by(feed, type) %>% 
      reframe(proportion = sum(proportion),
              macro = sum(macro),
              digest = sum(digest))
) %>% bind_rows()
fut_feed <- list(
    feed_params_protein[[3]] %>% 
      mutate(feed = "future", type = "protein") %>% group_by(feed, type) %>% 
      reframe(proportion = sum(proportion),
              macro = sum(macro),
              digest = sum(digest)),
  feed_params_carbs[[3]] %>% 
      mutate(feed = "future", type = "carb") %>% group_by(feed, type) %>% 
      reframe(proportion = sum(proportion),
              macro = sum(macro),
              digest = sum(digest)),
  feed_params_lipids[[3]] %>% 
      mutate(feed = "future", type = "lipid") %>% group_by(feed, type) %>% 
      reframe(proportion = sum(proportion),
              macro = sum(macro),
              digest = sum(digest))
) %>% bind_rows()

feeds <- rbind(ref_feed, past_feed, fut_feed)
```

```{r fig-compare-feeds-composition}
#| fig-cap: Feed composition


```

```{r fig-compare-feeds-digestibility}


```

# Individual runs

I set up some “example fish” to speed up future model adjustments – basically fish that are the average of their whole farm, easier than running 5000 fish per farm while I’m making changes.

## Food provided vs food eaten

```{r food-raw-data}
#| cache: false
#| eval: true
#| code-summary: Load and cache data to avoid spending a long time on it every render.

ing_pot <- tar_read(exind_ing_pot, store = targets_store, branches = c(b1, b2, b3))
ing_act <- tar_read(exind_ing_act, store = targets_store, branches = c(b1, b2, b3))
food_prov <- tar_read(exind_food_prov, store = targets_store, branches = c(b1, b2, b3))
```

Within the model, salmon have a maximum ingestion potential (based on their weight and individualised feeding rate). The actual food ingested is 97% of their ingestion potential (food encounter efficiency) or the total food provided, whichever is less. @fig-food-prov-theoretical shows an example of how food provided scales with potential individual ingestion.

```{r fig-food-prov-theoretical}
#| eval: true
#| fig-cap: Example of food provided based on potential ingestion (where feeding rate ranges from 0 to 1). This curve is constructed with a single fish of mean starting weight (125 g) and average maximum ingestion rate (0.035). The dashed line shows food provision == potential ingestion.

df <- data.frame(rel_feeding = seq(0,1,0.01)) %>% 
mutate(ing_pot = pop_params['meanImax'] * (pop_params['meanW']^species_params['m']) * rel_feeding,
       food_prov = NA)
for (i in 1:nrow(df)) {
  df$food_prov[i] <- food_prov_rate(rel_feeding = df$rel_feeding[i], ing_pot = df$ing_pot[i], 
                                    ing_pot_10 = pop_params['meanImax'] * (pop_params['meanW']^species_params['m']) * 0.1)
}
lin <- seq(0,max(df$ing_pot),length.out=101)

df %>% 
  ggplot(aes(x = ing_pot, y = food_prov)) +
  geom_line(linewidth = 0.75) +
  geom_line(aes(x = lin, y = lin), linetype = "dashed") +
  theme_classic() +
  scale_x_continuous(breaks = seq(0,1.5, 0.25), limits = c(0,max(df$food_prov))) +
  scale_y_continuous(breaks = seq(0,1.5, 0.25)) +
  labs(x = "Potential ingestion (g)", y = "Food provided (g)")
```

```{r feed-nums}
#| eval: true
#| cache: false

prov <- merge(ing_pot, ing_act, by = c("farm_ID", "feed", "days", "prod_days")) %>% 
  merge(food_prov, by = c("farm_ID", "feed", "days", "prod_days")) %>% 
  mutate(uneaten = food_prov - ing_act,
         uneaten_perc = uneaten/food_prov) %>% 
  select(-c(food_prov, ing_act))
```

Therefore, uneaten feed can be quite high (up to \~30%) when relative feeding is $\leq$10%. But generally, the median amount of uneaten food is `r round(100*median(prov$uneaten_perc), 1)`% (@fig-uneaten-feed).

```{r fig-uneaten-feed}
#| eval: true
#| cache: false
#| fig-cap: Difference between food provided and actual ingestion (i.e. total food ingestion efficiency) for 25 random farms. 

prov %>% 
  ggplot(aes(x = ing_pot, y = 100*uneaten_perc, colour = feed)) +
  geom_point() +
  theme_classic() +
  scale_colour_brewer(palette = "Set1") +
  theme_classic() +
  labs(x = "Potential feed ingestion (g)", y = "Uneaten food (% of provided)")
```

# References
