---
title: "Synthesising the model outputs"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(here)
library(qs)
library(sf)
library(dtplyr)
library(future)
library(furrr)

this_species <- "atlantic_salmon"

```

Bring in spatial file with farm IDs

```{r}

locations_file <- 
  qread(file = sprintf("data/_general_data/farm_locations/%s_locations_w_temps.qs", this_species)) |> 
  select(-c(day, temp_c)) |> 
  group_by(farm_id) |> 
  group_split() |> 
  map_df(.f = \(x){return(x |> slice(1))})


```

We are primarily interested in biomass produced, excretion (ammonia), faeces, and wasted feed broken down to nitrogen.

REFERENCE FEED

Bring in relevant model outputs.

```{r}

this_feed <- "reference"


biomass_files <- list.files(path = sprintf(here("data/atlantic_salmon/data_products/model_outputs/%s"), this_feed), pattern = "biomass_", full.names = TRUE)

faeces_files <- list.files(path = sprintf(here("data/atlantic_salmon/data_products/model_outputs/%s"), this_feed), pattern = "excretion_", full.names = TRUE)

feed_waste_files <- list.files(path = sprintf(here("data/atlantic_salmon/data_products/model_outputs/%s"), this_feed), pattern = "feed_waste_", full.names = TRUE)

ammonia_files <- list.files(path = sprintf(here("data/atlantic_salmon/data_products/model_outputs/%s"), this_feed), pattern = "NH4_", full.names = TRUE)

weight_files <- list.files(path = sprintf(here("data/atlantic_salmon/data_products/model_outputs/%s"), this_feed), pattern = "weight_", full.names = TRUE)



```

Reference feeds - loop through the locations file to add the biomass, excretion, faeces, uneaten feed in N.

```{r}

feed_type <-  "reference"

commercial_size <- read.csv(sprintf(here("data/%s/params/Parameters_%s.csv"), this_species, feed_type)) |> filter(Description == "Commercial size") |> pull(Value) |> as.numeric()

farm_ids <- locations_file$farm_id


#this_id <- farm_ids[[29]]


#Set up multicore

future::plan(strategy = "multisession", workers = parallel::detectCores()-2)

farm_N_reference <- 
  
  future_map(.x = farm_ids, .f = \(this_id){
    
  message("Synthesising nitrogen data at harvest this farmID_", this_id)
  
  weight_days <- qread(weight_files[grep(pattern = sprintf("farmID_%s.qs", this_id), weight_files)]) |> pull(days)
  weights <- qread(weight_files[grep(pattern = sprintf("farmID_%s.qs", this_id), weight_files)]) |> pull(weight)
  
  
  harvest_day <- 
    weight_days |> 
    pluck(if(tail(weights, n=2)[1]>commercial_size){
      head(which(weights>commercial_size), n =2)[1]
    } else {
      tail(weight_days, n=2)[1]
      } )
    
  #biomass
  this_biomass_mean <- qread(biomass_files[grep(pattern = sprintf("farmID_%s.qs", this_id), biomass_files)]) |> 
    slice(harvest_day) |> pull(biomass)/1e+6
  
  this_biomass_lb <- qread(biomass_files[grep(pattern = sprintf("farmID_%s.qs", this_id), biomass_files)]) |> 
    slice(harvest_day) |> pull(lower_bound)/1e+6
  
   this_biomass_ub <- qread(biomass_files[grep(pattern = sprintf("farmID_%s.qs", this_id), biomass_files)]) |> 
    slice(harvest_day) |> pull(upper_bound)/1e+6
   
   
   #weight
   this_weight_mean <- qread(weight_files[grep(pattern = sprintf("farmID_%s.qs", this_id), weight_files)]) |> filter(days == harvest_day) |> pull(weight)
   
   this_weight_lb <- qread(weight_files[grep(pattern = sprintf("farmID_%s.qs", this_id), weight_files)]) |> filter(days == harvest_day) |> pull(lower_bound)
   
   this_weight_ub <- qread(weight_files[grep(pattern = sprintf("farmID_%s.qs", this_id), weight_files)]) |> filter(days == harvest_day)|> pull(upper_bound)
   
   
   
  #faeces 
    this_faeces_mean <- qread(faeces_files[grep(pattern = sprintf("farmID_%s.qs", this_id), faeces_files)]) |> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(mean_excretion) |> sum()/6.25/1e+6
    
     this_faeces_lb <- qread(faeces_files[grep(pattern = sprintf("farmID_%s.qs", this_id), faeces_files)]) |> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(lower_bound) |> sum()/6.25/1e+6
   
  this_faeces_ub <- qread(faeces_files[grep(pattern = sprintf("farmID_%s.qs", this_id), faeces_files)]) |> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(upper_bound) |> sum()/6.25/1e+6
  
  
  
  #feed waste
  this_feed_waste_mean <- qread(feed_waste_files[grep(pattern = sprintf("farmID_%s.qs", this_id), feed_waste_files)])|> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(mean_waste) |> sum()/6.25/1e+6
  
  this_feed_waste_lb <- qread(feed_waste_files[grep(pattern = sprintf("farmID_%s.qs", this_id), feed_waste_files)])|> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(lower_bound) |> sum()/6.25/1e+6
  
  this_feed_waste_ub <- qread(feed_waste_files[grep(pattern = sprintf("farmID_%s.qs", this_id), feed_waste_files)])|> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(upper_bound) |> sum()/6.25/1e+6
  
  
  
  #excretion (NH4)
  this_ammonia_mean <- qread(ammonia_files[grep(pattern = sprintf("farmID_%s.qs", this_id), ammonia_files)]) |> 
    slice(1:harvest_day) |> pull(nh4_production) |> sum()/1e+6
  
  this_ammonia_lb <- qread(ammonia_files[grep(pattern = sprintf("farmID_%s.qs", this_id), ammonia_files)]) |> 
    slice(1:harvest_day) |> pull(lower_bound) |> sum()/1e+6
  
  this_ammonia_ub <- qread(ammonia_files[grep(pattern = sprintf("farmID_%s.qs", this_id), ammonia_files)]) |> 
    slice(1:harvest_day) |> pull(upper_bound) |> sum()/1e+6
  
  
  
  return(data.frame(farm_id = this_id, biomass_mean = this_biomass_mean, biomass_lb = this_biomass_lb, biomass_ub = this_biomass_ub, faeces_mean = this_faeces_mean, faeces_lb = this_faeces_lb, faeces_ub = this_faeces_ub, excretion_mean = this_ammonia_mean, excretion_lb = this_ammonia_lb, excretion_ub = this_ammonia_ub, feed_waste_mean = this_feed_waste_mean, feed_waste_lb = this_feed_waste_lb, feed_waste_ub = this_feed_waste_ub, total_N_mean = sum(this_faeces_mean, this_ammonia_mean, this_feed_waste_mean), total_N_lb = sum(this_faeces_lb, this_ammonia_lb, this_feed_waste_lb), total_N_ub = this_feed_waste_ub))
  
}) |> bind_rows() 

farm_N_reference_spatial <- 
  locations_file |> 
  select(iso3c, country, tonnes_per_farm, geometry, farm_id) |> 
  distinct() |> 
  left_join(farm_N_reference)



qsave(x = farm_N_reference_spatial, file =  sprintf(here("data/atlantic_salmon/data_products/model_summaries/%s/nitrogen_summary.qs"), this_feed))


```

PAST FEEDS

Bring in the relevant model outputs.

```{r}

this_feed <- "past"


biomass_files <- list.files(path = sprintf(here("data/atlantic_salmon/data_products/model_outputs/%s"), this_feed), pattern = "biomass_", full.names = TRUE)

faeces_files <- list.files(path = sprintf(here("data/atlantic_salmon/data_products/model_outputs/%s"), this_feed), pattern = "excretion_", full.names = TRUE)

feed_waste_files <- list.files(path = sprintf(here("data/atlantic_salmon/data_products/model_outputs/%s"), this_feed), pattern = "feed_waste_", full.names = TRUE)

ammonia_files <- list.files(path = sprintf(here("data/atlantic_salmon/data_products/model_outputs/%s"), this_feed), pattern = "NH4_", full.names = TRUE)

weight_files <- list.files(path = sprintf(here("data/atlantic_salmon/data_products/model_outputs/%s"), this_feed), pattern = "weight_", full.names = TRUE)


```

Past feeds - loop through the locations file to add the biomass, excretion, faeces, uneaten feed in N.

```{r}

feed_type <-  "past"

commercial_size <- read.csv(sprintf(here("data/%s/params/Parameters_%s.csv"), this_species, feed_type)) |> filter(Description == "Commercial size") |> pull(Value) |> as.numeric()

farm_ids <- locations_file$farm_id


this_id <- farm_ids[[29]]


#Set up multicore

future::plan(strategy = "multisession", workers = parallel::detectCores()-2)

farm_N_past <- 
  
  future_map(.x = farm_ids, .f = \(this_id){
    
  message("Synthesising nitrogen data at harvest this farmID_", this_id)
  
  weight_days <- qread(weight_files[grep(pattern = sprintf("farmID_%s.qs", this_id), weight_files)]) |> pull(days)
  weights <- qread(weight_files[grep(pattern = sprintf("farmID_%s.qs", this_id), weight_files)]) |> pull(upper_bound)
  
  
  harvest_day <- 
    weight_days |> 
    pluck(if(tail(weights, n=2)[1]>commercial_size){
      head(which(weights>commercial_size), n =2)[1]
    } else {
      tail(weight_days, n=2)[1]
      } )
    
  
   #biomass
  this_biomass_mean <- qread(biomass_files[grep(pattern = sprintf("farmID_%s.qs", this_id), biomass_files)]) |> 
    slice(harvest_day) |> pull(biomass)/1e+6
  
  this_biomass_lb <- qread(biomass_files[grep(pattern = sprintf("farmID_%s.qs", this_id), biomass_files)]) |> 
    slice(harvest_day) |> pull(lower_bound)/1e+6
  
   this_biomass_ub <- qread(biomass_files[grep(pattern = sprintf("farmID_%s.qs", this_id), biomass_files)]) |> 
    slice(harvest_day) |> pull(upper_bound)/1e+6
   
   
   #weight
   this_weight_mean <- qread(weight_files[grep(pattern = sprintf("farmID_%s.qs", this_id), weight_files)]) |> filter(days == harvest_day) |> pull(weight)
   
   this_weight_lb <- qread(weight_files[grep(pattern = sprintf("farmID_%s.qs", this_id), weight_files)]) |> filter(days == harvest_day) |> pull(lower_bound)
   
   this_weight_ub <- qread(weight_files[grep(pattern = sprintf("farmID_%s.qs", this_id), weight_files)]) |> filter(days == harvest_day)|> pull(upper_bound)
   
   
   
  #faeces 
    this_faeces_mean <- qread(faeces_files[grep(pattern = sprintf("farmID_%s.qs", this_id), faeces_files)]) |> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(mean_excretion) |> sum()/6.25/1e+6
    
     this_faeces_lb <- qread(faeces_files[grep(pattern = sprintf("farmID_%s.qs", this_id), faeces_files)]) |> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(lower_bound) |> sum()/6.25/1e+6
   
  this_faeces_ub <- qread(faeces_files[grep(pattern = sprintf("farmID_%s.qs", this_id), faeces_files)]) |> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(upper_bound) |> sum()/6.25/1e+6
  
  
  
  #feed waste
  this_feed_waste_mean <- qread(feed_waste_files[grep(pattern = sprintf("farmID_%s.qs", this_id), feed_waste_files)])|> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(mean_waste) |> sum()/6.25/1e+6
  
  this_feed_waste_lb <- qread(feed_waste_files[grep(pattern = sprintf("farmID_%s.qs", this_id), feed_waste_files)])|> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(lower_bound) |> sum()/6.25/1e+6
  
  this_feed_waste_ub <- qread(feed_waste_files[grep(pattern = sprintf("farmID_%s.qs", this_id), feed_waste_files)])|> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(upper_bound) |> sum()/6.25/1e+6
  
  
  
  #excretion (NH4)
  this_ammonia_mean <- qread(ammonia_files[grep(pattern = sprintf("farmID_%s.qs", this_id), ammonia_files)]) |> 
    slice(1:harvest_day) |> pull(nh4_production) |> sum()/1e+6
  
  this_ammonia_lb <- qread(ammonia_files[grep(pattern = sprintf("farmID_%s.qs", this_id), ammonia_files)]) |> 
    slice(1:harvest_day) |> pull(lower_bound) |> sum()/1e+6
  
  this_ammonia_ub <- qread(ammonia_files[grep(pattern = sprintf("farmID_%s.qs", this_id), ammonia_files)]) |> 
    slice(1:harvest_day) |> pull(upper_bound) |> sum()/1e+6
  
  
  
  return(data.frame(farm_id = this_id, biomass_mean = this_biomass_mean, biomass_lb = this_biomass_lb, biomass_ub = this_biomass_ub, faeces_mean = this_faeces_mean, faeces_lb = this_faeces_lb, faeces_ub = this_faeces_ub, excretion_mean = this_ammonia_mean, excretion_lb = this_ammonia_lb, excretion_ub = this_ammonia_ub, feed_waste_mean = this_feed_waste_mean, feed_waste_lb = this_feed_waste_lb, feed_waste_ub = this_feed_waste_ub, total_N_mean = sum(this_faeces_mean, this_ammonia_mean, this_feed_waste_mean), total_N_lb = sum(this_faeces_lb, this_ammonia_lb, this_feed_waste_lb), total_N_ub = this_feed_waste_ub))
  
}) |> bind_rows() 



farm_N_past_spatial <- 
  locations_file |> 
  select(iso3c, country, tonnes_per_farm, geometry, farm_id) |> 
  distinct() |> 
  left_join(farm_N_past)



qsave(x = farm_N_past_spatial, file =  sprintf(here("data/atlantic_salmon/data_products/model_summaries/%s/nitrogen_summary.qs"), this_feed))

```

FUTURE FEEDS

Bring in the relevant model outputs.

```{r}

this_feed <- "future"


biomass_files <- list.files(path = sprintf(here("data/atlantic_salmon/data_products/model_outputs/%s"), this_feed), pattern = "biomass_", full.names = TRUE)

faeces_files <- list.files(path = sprintf(here("data/atlantic_salmon/data_products/model_outputs/%s"), this_feed), pattern = "excretion_", full.names = TRUE)

feed_waste_files <- list.files(path = sprintf(here("data/atlantic_salmon/data_products/model_outputs/%s"), this_feed), pattern = "feed_waste_", full.names = TRUE)

ammonia_files <- list.files(path = sprintf(here("data/atlantic_salmon/data_products/model_outputs/%s"), this_feed), pattern = "NH4_", full.names = TRUE)

weight_files <- list.files(path = sprintf(here("data/atlantic_salmon/data_products/model_outputs/%s"), this_feed), pattern = "weight_", full.names = TRUE)


```

Future feeds - loop through the locations file to add the biomass, excretion, faeces, uneaten feed in N.

```{r}


feed_type <-  "future"

commercial_size <- read.csv(sprintf(here("data/%s/params/Parameters_%s.csv"), this_species, feed_type)) |> filter(Description == "Commercial size") |> pull(Value) |> as.numeric()

farm_ids <- locations_file$farm_id


this_id <- farm_ids[[29]]


#Set up multicore

future::plan(strategy = "multisession", workers = parallel::detectCores()-2)

farm_N_future <- 
  
  future_map(.x = farm_ids, .f = \(this_id){
    
  message("Synthesising nitrogen data at harvest this farmID_", this_id)
  
  weight_days <- qread(weight_files[grep(pattern = sprintf("farmID_%s.qs", this_id), weight_files)]) |> pull(days)
  weights <- qread(weight_files[grep(pattern = sprintf("farmID_%s.qs", this_id), weight_files)]) |> pull(upper_bound)
  
  
  harvest_day <- 
    weight_days |> 
    pluck(if(tail(weights, n=2)[1]>commercial_size){
      head(which(weights>commercial_size), n =2)[1]
    } else {
      tail(weight_days, n=2)[1]
      } )
    
    #biomass
  this_biomass_mean <- qread(biomass_files[grep(pattern = sprintf("farmID_%s.qs", this_id), biomass_files)]) |> 
    slice(harvest_day) |> pull(biomass)/1e+6
  
  this_biomass_lb <- qread(biomass_files[grep(pattern = sprintf("farmID_%s.qs", this_id), biomass_files)]) |> 
    slice(harvest_day) |> pull(lower_bound)/1e+6
  
   this_biomass_ub <- qread(biomass_files[grep(pattern = sprintf("farmID_%s.qs", this_id), biomass_files)]) |> 
    slice(harvest_day) |> pull(upper_bound)/1e+6
   
   
   #weight
   this_weight_mean <- qread(weight_files[grep(pattern = sprintf("farmID_%s.qs", this_id), weight_files)]) |> filter(days == harvest_day) |> pull(weight)
   
   this_weight_lb <- qread(weight_files[grep(pattern = sprintf("farmID_%s.qs", this_id), weight_files)]) |> filter(days == harvest_day) |> pull(lower_bound)
   
   this_weight_ub <- qread(weight_files[grep(pattern = sprintf("farmID_%s.qs", this_id), weight_files)]) |> filter(days == harvest_day)|> pull(upper_bound)
   
   
   
  #faeces 
    this_faeces_mean <- qread(faeces_files[grep(pattern = sprintf("farmID_%s.qs", this_id), faeces_files)]) |> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(mean_excretion) |> sum()/6.25/1e+6
    
     this_faeces_lb <- qread(faeces_files[grep(pattern = sprintf("farmID_%s.qs", this_id), faeces_files)]) |> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(lower_bound) |> sum()/6.25/1e+6
   
  this_faeces_ub <- qread(faeces_files[grep(pattern = sprintf("farmID_%s.qs", this_id), faeces_files)]) |> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(upper_bound) |> sum()/6.25/1e+6
  
  
  
  #feed waste
  this_feed_waste_mean <- qread(feed_waste_files[grep(pattern = sprintf("farmID_%s.qs", this_id), feed_waste_files)])|> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(mean_waste) |> sum()/6.25/1e+6
  
  this_feed_waste_lb <- qread(feed_waste_files[grep(pattern = sprintf("farmID_%s.qs", this_id), feed_waste_files)])|> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(lower_bound) |> sum()/6.25/1e+6
  
  this_feed_waste_ub <- qread(feed_waste_files[grep(pattern = sprintf("farmID_%s.qs", this_id), feed_waste_files)])|> filter(nutrient == "Protein") |> slice(1:harvest_day) |> pull(upper_bound) |> sum()/6.25/1e+6
  
  
  
  #excretion (NH4)
  this_ammonia_mean <- qread(ammonia_files[grep(pattern = sprintf("farmID_%s.qs", this_id), ammonia_files)]) |> 
    slice(1:harvest_day) |> pull(nh4_production) |> sum()/1e+6
  
  this_ammonia_lb <- qread(ammonia_files[grep(pattern = sprintf("farmID_%s.qs", this_id), ammonia_files)]) |> 
    slice(1:harvest_day) |> pull(lower_bound) |> sum()/1e+6
  
  this_ammonia_ub <- qread(ammonia_files[grep(pattern = sprintf("farmID_%s.qs", this_id), ammonia_files)]) |> 
    slice(1:harvest_day) |> pull(upper_bound) |> sum()/1e+6
  
  
  
  return(data.frame(farm_id = this_id, biomass_mean = this_biomass_mean, biomass_lb = this_biomass_lb, biomass_ub = this_biomass_ub, faeces_mean = this_faeces_mean, faeces_lb = this_faeces_lb, faeces_ub = this_faeces_ub, excretion_mean = this_ammonia_mean, excretion_lb = this_ammonia_lb, excretion_ub = this_ammonia_ub, feed_waste_mean = this_feed_waste_mean, feed_waste_lb = this_feed_waste_lb, feed_waste_ub = this_feed_waste_ub, total_N_mean = sum(this_faeces_mean, this_ammonia_mean, this_feed_waste_mean), total_N_lb = sum(this_faeces_lb, this_ammonia_lb, this_feed_waste_lb), total_N_ub = this_feed_waste_ub))
  
}) |> bind_rows() 



farm_N_future_spatial <- 
  locations_file |> 
  select(iso3c, country, tonnes_per_farm, geometry, farm_id) |> 
  distinct() |> 
  left_join(farm_N_future)



qsave(x = farm_N_future_spatial, file =  sprintf(here("data/atlantic_salmon/data_products/model_summaries/%s/nitrogen_summary.qs"), this_feed))




```
