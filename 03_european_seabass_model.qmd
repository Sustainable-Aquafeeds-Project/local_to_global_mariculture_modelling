---
title: "3_european_seabass_model"
format: html
editor: visual
---

Setup

```{r}
library(tidyverse)
library(here)


species <- "european_seabass"

```

Data loader module

```{r}


temp_data <-  read.csv(sprintf(here("data/forcings/%s_forcings/Water_temperature.csv"), species), sep = ",", header = FALSE)

feed_rations <- read.csv(sprintf(here("data/forcings/%s_forcings/Feeding.csv"), species), sep = ",", header = FALSE)

params  <-  read.csv(sprintf(here("data/parameters/%s_parameters/Parameters.csv"), species), sep = ",")

timeT  <-  as.matrix(temp_data[, 1])

temp  <-  as.double(as.matrix(temp_data[, 2]))

timeG <-  as.matrix(feed_rations[, 1])

feed_amount <-  as.double(as.matrix(feed_rations[, 2]))
    
dates <-  params[22:23, 3] #start and end of the feeding trial

t0 <-  min(as.numeric(as.Date(timeT[1], "%d/%m/%Y")), as.numeric(as.Date(timeG[1], "%d/%m/%Y"))) #This takes the earliest of the feeding dates and the SST date records

ti <-  as.numeric(as.Date(dates[1], "%d/%m/%Y")) - t0 #integration start minus t0 (difference between integration start and the first input data)

tf <-  as.numeric(as.Date(dates[2], "%d/%m/%Y")) - t0 #integration end minus t0 (difference between integration end and the first input data)

timeTseries <-  as.numeric(as.Date(timeT, "%d/%m/%Y")) - t0 #creates day number time series for temperature

timeGseries <-  as.numeric(as.Date(timeG, "%d/%m/%Y")) - t0 #creates day number times series for feeding

Ttem <-  as.vector(matrix(0, nrow = ti - 1)) #

Gtem <-  as.vector(matrix(0, nrow = ti - 1))

i <-  ti:tf + 1

Ttem2 <-  approx(timeTseries, temp, xout = i)
Gtem2 <-  approx(timeGseries, feed_amount, xout = i)
Tint <- c(Ttem, Ttem2$y)
Gint <-  c(Gtem, Gtem2$y)


daysT <- seq(as.Date(timeT[1], format = "%d/%m/%Y"), by = "days",   length = length(Tint))
daysG <- seq(as.Date(timeG[1], format = "%d/%m/%Y"), by = "days",  length = length(Tint))


 if ((ti < (as.numeric(as.Date(timeT[1], "%d/%m/%Y")) - t0)) | 
        (ti < (as.numeric(as.Date(timeG[1], "%d/%m/%Y")) - t0))) {
        message("ERROR: forcings are beginning after the specified integration start\n")
        message("Impossible to proceed with interpolation\n")
    }
    if ((ti > (as.numeric(as.Date(timeT[length(timeT)], "%d/%m/%Y")) - 
        t0)) | (ti > (as.numeric(as.Date(timeG[length(timeG)], 
        "%d/%m/%Y")) - t0))) {
        message("ERROR: forcing are ending before the specified integration end\n")
        message("Impossible to proceed with interpolation\n")
    }

forcings <-  list(daysT, Tint, daysG, Gint)

```

### Individual model

Preprocessing

```{r}

message("Data preprocessing")
 

timeT = forcings[[1]]
Tint = forcings[[2]]
timeG = forcings[[3]]
Gint = forcings[[4]]


param_matrix <-  read.csv(sprintf(here("data/parameters/%s_parameters/Parameters.csv"), species), sep = ",")
feed_comp <- read.csv(sprintf(here("data/forcings/%s_forcings/Food_characterization.csv"), species), sep = ",", header = FALSE)

param_values <-  as.double(as.matrix(param_matrix[1:21, 3]))

dates = param_matrix[22:23, 3] #start and end of integration

IC <- as.double(as.matrix(param_matrix[24, 3])) # initial weight

CS <-  as.double(as.matrix(param_matrix[25, 3])) # commercial size

feed_contibutions <-  as.double(as.matrix(feed_comp[, 1]))

t0<- min(as.numeric(as.Date(timeT[1], "%d/%m/%Y")), as.numeric(as.Date(timeG[1], 
                                                                       "%d/%m/%Y")), as.numeric(as.Date(Dates[1], "%d/%m/%Y")))
timestep <- 1
ti<- as.numeric(as.Date(Dates[1], "%d/%m/%Y")) - t0
tf = as.numeric(as.Date(Dates[2], "%d/%m/%Y")) - t0
weight = as.vector(matrix(0, nrow = ti))
weight[ti] = IC
times <- cbind(ti, tf, timestep)
Pcont = Food[1]
Lcont = Food[2]
Ccont = Food[3]    

message("The model will be executed with the following parameters:\n")

for (i in 1:21) {
        cat(paste0(toString(Param_matrix[i, 2]), ": ", toString(Param_matrix[i, 
            3]), " ", toString(Param_matrix[i, 4])), "\n")
    }
    cat(" \n")
    cat("Weight initial condition is: ", toString(IC), " g\n")
    cat(" \n")
    cat("Integration is performed between ", toString(Dates[1]), 
        " and ", toString(Dates[2]), "\n")
    cat(" \n")
    cat("The food has the following composition: \n")
    cat(toString(Pcont * 100), "% proteins\n")
    cat(toString(Lcont * 100), "% lipids\n")
    cat(toString(Ccont * 100), "% carbohydrates\n")
    cat(" \n")
    cat("Commercial size is ", toString(CS), " g")
    cat(" \n")
    cat(" \n")
    cat("Forcings are represented in graphs available at the following folder\n")
    cat(paste0(userpath, "/Bream_individual/Inputs/Forcings_plots"))
    Tintsave = Tint[(ti + 1):tf]
    filepath = paste0(userpath, "/Bream_individual/Inputs/Forcings_plots//Water_temperature.jpeg")
    

    
    
    jpeg(filepath, 800, 600)
    days <- seq(as.Date(Dates[1], format = "%d/%m/%Y"), by = "days", 
        length = tf - ti)
    plot(days, Tintsave, ylab = "Water temperature (Celsius degrees)", 
        xlab = "", xaxt = "n", type = "l", cex.lab = 1.4)
    labDates <- seq(as.Date(Dates[1], format = "%d/%m/%Y"), tail(days, 
        1), by = "months")
    axis.Date(side = 1, days, at = labDates, format = "%d %b %y", 
        las = 2)
    dev.off()
    Gintsave = Gint[(ti + 1):tf]
    filepath = paste0(userpath, "/Bream_individual/Inputs/Forcings_plots//Feeding.jpeg")
    jpeg(filepath, 800, 600)
    days <- seq(as.Date(Dates[1], format = "%d/%m/%Y"), by = "days", 
        length = tf - ti)
    plot(days, Gintsave, ylab = "Feed (g/d)", xlab = "", xaxt = "n", 
        type = "l", cex.lab = 1.4)
    labDates <- seq(as.Date(Dates[1], format = "%d/%m/%Y"), tail(days, 
        1), by = "months")
    axis.Date(side = 1, days, at = labDates, format = "%d %b %y", 
        las = 2)
    dev.off()
    output = list(Param, Tint, Gint, Food, IC, times, Dates, 
        CS)
    return(output)

```
